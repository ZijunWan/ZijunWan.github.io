<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank Wan&#39;s Blog</title>
  
  <subtitle>世界上只有一种真正的英雄主义，就是认清生活的真相后并依然热爱它</subtitle>
  <link href="http://frankmartinem.github.io/atom.xml" rel="self"/>
  
  <link href="http://frankmartinem.github.io/"/>
  <updated>2022-01-25T09:33:00.220Z</updated>
  <id>http://frankmartinem.github.io/</id>
  
  <author>
    <name>Zijun Wan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WORLD Vocoder</title>
    <link href="http://frankmartinem.github.io/2022/01/25/WORLD-Vocoder/"/>
    <id>http://frankmartinem.github.io/2022/01/25/WORLD-Vocoder/</id>
    <published>2022-01-25T09:22:32.000Z</published>
    <updated>2022-01-25T09:33:00.220Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="world-声码器">WORLD 声码器</h1><h2 id="introduction">Introduction</h2><p>WORLD是由Yamanashi大学的MORISE团队开发的一款语音合成软件，可以用来合成高质量的语音信号。</p><h2 id="method">Method</h2><p>WORLD的合成主要包括以下几个步骤： - 计算基础频率F0，使用DIO算法 - 计算频谱的包络线， 使用CheapTrick算法 - 计算非周期信号参数Aperiodicity parameters，使用PLATINUM算法</p><h3 id="section"></h3><h2 id="references">References</h2><p>[1] Morise M, Yokomori F, Ozawa K. WORLD: a vocoder-based high-quality speech synthesis system for real-time applications[J]. IEICE TRANSACTIONS on Information and Systems, 2016, 99(7): 1877-1884. [2] M. Morise, H. Kawahara, and H. Katayose, “Fast and reliable f0 estimation method based on the period extraction of vocal fold vibration of singing voice and speech,” in Proc. AES 35th International Conference, CD-ROM Proceedings, 2009. [3] M. Morise, H. Kawahara, and T. Nishiura, “Rapid f0 estimation for high-snr speech based on fundamental component extraction,” IEICE Trans. Inf. &amp; Syst. (Japanese Edition), vol.J93-D, no.2, pp.109–117, 2010. [4] M. Morise, “Cheaptrick, a spectral envelope estimator for high-quality speech synthesis,” Speech Communication, vol.67, pp.1–7, 2015. [5] M. Morise, “Platinum: A method to extract excitation signals for voice synthesis system,” Acoust. Sci. &amp; Tech., vol.33, no.2, pp.123–125, 2012. [6] M. Morise, “Error evaluation of an f0-adaptive spectral envelope estimator in robustness against the additive noise and f0 error,” IEICE Trans. on Information Systems, vol.E98-D, no.7, pp.1405–1408, 2015. [7] https://www.codetd.com/article/5781310 [8] https://www.sohu.com/a/219420730_723464 [9] https://github.com/mmorise/World</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="SIGNAL PROCESSING" scheme="http://frankmartinem.github.io/categories/SIGNAL-PROCESSING/"/>
    
    
    <category term="Audio" scheme="http://frankmartinem.github.io/tags/Audio/"/>
    
  </entry>
  
  <entry>
    <title>Mel Frequency Cepstral Coefficients</title>
    <link href="http://frankmartinem.github.io/2022/01/18/Mel-Frequency-Cepstral-CoefficientsMel-Frequency-Cepstral-Coefficients/"/>
    <id>http://frankmartinem.github.io/2022/01/18/Mel-Frequency-Cepstral-CoefficientsMel-Frequency-Cepstral-Coefficients/</id>
    <published>2022-01-18T09:27:41.000Z</published>
    <updated>2022-01-23T19:33:16.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mel-frequency-cepstral-coefficients-mfcc">Mel Frequency Cepstral Coefficients (MFCC)</h1><h2 id="introduction">Introduction</h2><p>在语音信号处理中，我们需要得到不同声音的不同特征表示。这样我们可以对声音进行区分。对于传统的信号处理，我们常用频域分布，功率谱，能量等特征来描述一个一维信号。语音信号也不例外，作为一种常用的一维信号，其处理仍旧会使用传统的方法。但是也有些许不同。于是，我们就需要用 MFCC，即梅尔倒频谱系数来计算语音信号的特征。 与传统的信号处理不同的是，语音信号的处理需要考虑到人耳听到声音的感觉和传统方式处理后的数据的对应关系。例如：人的耳蜗会根据声音的不同在不同的地方共振；也不会太区分两个很细微的频率，特别是高频的声音；而且，人类对于声音大小的感知不是线性的，所以我们会计算对数。</p><h2 id="method">Method</h2><p>MFCC的计算主要包括以下几个步骤： 1. 预加重(Pre-Emphasis)</p><p><span class="math display">\[ y(t) = x(t) - \alpha x(t-1) \]</span></p><p>其中，<span class="math inline">\(y(t)\)</span>是预加重后的数据, <span class="math inline">\(x(t)\)</span>是原始信号, <span class="math inline">\(\alpha\)</span>是预加重系数，一般介于0.97-1之间。其目的主要是提升高频部分，使信号的频谱更加平坦。同时，也避免后面计算傅立叶变换时出现数值问题。比较预加重前后的音频信号，如图1所示。 <img src="/img/Mel-Frequency-Cepstral-Coefficients-1.png" alt="Fig-1: 预加重前后音频信号对比"></p><ol start="2" type="1"><li><p>分帧(Frame) 也就是分bin，需要将原始信号拼接起来形成帧。每一帧的时间长度一般是20ms-30ms左右。然后也会采取滑动窗的形式，避免帧和帧之间差距过大。目前常用处理方式是，控制帧的范围在20ms-30ms之间，每一帧的重叠部分在50%左右。分帧后的音频信号如图2所示。可以看出和预加重的信号基本一致。 <img src="/img/Mel-Frequency-Cepstral-Coefficients-2.png" alt="Fig-2: 分帧后的音频信号"></p></li><li><p>加窗 (Window) 对每一帧数据进行划窗处理，用增加数据之间的连续性。对于非周期信号，由于傅立叶变换只能计算有限长度的信号，如果不加滑动窗，会产生频域泄漏。所以，可以用窗函数对信号进行截断，来减少这种频域的泄漏问题。这里我们使用汉宁窗。 <span class="math display">\[ w(n) = (1-a) - a \times cos(\frac{2\pi n}{N-1})\]</span> 其中，<span class="math inline">\(N\)</span>是汉宁窗的长度，<span class="math inline">\(a\)</span>是汉宁窗的系数，一般取0.46。 所以，加窗后的信号为： <span class="math display">\[s(n) = x(n) \times w(n)\]</span> 其中，<span class="math inline">\(s(n)\)</span>是加窗后的信号，<span class="math inline">\(x(n)\)</span>是原始信号。</p></li><li><p>傅立叶变换(FFT) 对信号进行FFT，计算当前信号的频谱特性。 <span class="math display">\[ X(k) = \sum_{n=0}^{N-1} x(n) \times e^{-2\pi i k / N}, 0 \leq k \leq N-1 \]</span> 其中，<span class="math inline">\(X(k)\)</span>是频谱，<span class="math inline">\(x(n)\)</span>是加窗后的语音信号，<span class="math inline">\(N\)</span>是FFT点数。上述音频信号的功率谱如图3所示: <img src="/img/Mel-Frequency-Cepstral-Coefficients-3.png" alt="Fig-3: 音频信号的功率谱"></p></li><li><p>三角带通滤波器 将计算后的频谱用三角滤波器滤波。这组三角滤波器是与Mel尺度匹配的。一般来讲滤波器的个数在40个。梅尔频谱会更加关注低频的信号，而对高频的信号用低分辨率的感知。Mel三角滤波器组如图4所示。 <img src="/img/Mel-Frequency-Cepstral-Coefficients-4.jpeg" alt="Fig-4: Mel三角滤波器组"> Mel频谱和真实频谱之间的换算关系如下: <span class="math display">\[ m = 2595 log_{10}(1+\frac{f}{700})\]</span> <span class="math display">\[ f = 700(10^{m/2595}-1)\]</span> 其中，<span class="math inline">\(m\)</span>是Mel频谱，<span class="math inline">\(f\)</span>是真实频谱。 三角滤波器组的频率响应可以如下表示： <span class="math display">\[ H_m(k) = \begin{cases} 0 &amp; {k\leq f(m-1)} \newline \frac{2(k-f(m-1))}{(f(m+1)-f(m-1))(f(m)-f(m-1))} &amp; {f(m-1) \leq k \leq f(m)} \newline \frac{2(f(m+1)-k)}{(f(m+1)-f(m-1))(f(m)-f(m-1))} &amp; {f(m) \leq k \leq f(m+1)} \newline 0 &amp; {k \geq f(m+1)} \end{cases}\]</span> 其中，<span class="math inline">\(H_m(k)\)</span>是三角滤波器组的频率响应。<span class="math inline">\(f(m)\)</span>表示第<span class="math inline">\(m\)</span>个三角滤波器的中心频率。</p></li><li><p>离散余弦变换(DCT) 将上述滤波器组的系数进行离散余弦变换： <span class="math display">\[ C(n) = \sum_{m=0}^{n-1}s(m)cos(\frac{\pi n(m-0.5)}{M}), n = 1, 2, ..., L \]</span> DCT在这里的主要作用，是去除滤波器组中系数的高度相关性，将滤波器组系数的能量聚集起来，去除那些能量小的系数。经过计算以后，得到的就是MFCC系数了。</p></li></ol><p>以上就是MFCC的计算过程。对于语音问题，我们一般在计算DCT得到MFCC后，会再用正弦函数进行处理 (sinusoidal liftering)。主要是来淡化高阶MFCC系数的影响。因为在语音识别时，更高频的信号大多数是噪声。最后，我们一般也会进行归一化处理。得到的结果如图5所示。 <img src="/img/Mel-Frequency-Cepstral-Coefficients-5.png" alt="Fig-5: Filter Bank 和 MFCC归一化后的结果"></p><h2 id="code">Code</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> soundfile <span class="token keyword">as</span> sf<span class="token keyword">from</span> scipy<span class="token punctuation">.</span>fftpack <span class="token keyword">import</span> dct<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># pre-emphasis</span>alpha <span class="token operator">=</span> <span class="token number">0.97</span>f <span class="token operator">=</span> sf<span class="token punctuation">.</span>SoundFile<span class="token punctuation">(</span><span class="token string">'bjkjg.wav'</span><span class="token punctuation">)</span>d<span class="token punctuation">,</span> sr <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>sampleratepd <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">-</span> alpha <span class="token operator">*</span> d<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># framing</span>frame_size<span class="token punctuation">,</span> frame_stride <span class="token operator">=</span> <span class="token number">0.025</span><span class="token punctuation">,</span> <span class="token number">0.01</span>frame_length <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>frame_size<span class="token operator">*</span>sr<span class="token punctuation">)</span><span class="token punctuation">)</span>frame_step <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>frame_stride<span class="token operator">*</span>sr<span class="token punctuation">)</span><span class="token punctuation">)</span> signal_length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pd<span class="token punctuation">)</span>num_frames <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>signal_length<span class="token operator">-</span>frame_length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>frame_step<span class="token punctuation">)</span><span class="token punctuation">)</span>pad_signal_length <span class="token operator">=</span> num_frames <span class="token operator">*</span> frame_step <span class="token operator">+</span> frame_lengthpad_signal <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pd<span class="token punctuation">,</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>pad_signal_length <span class="token operator">-</span> signal_length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>indices <span class="token operator">=</span> np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>frame_length<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>num_frames<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>np<span class="token punctuation">.</span>tile<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>num_frames<span class="token operator">*</span>frame_step<span class="token punctuation">,</span>frame_step<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>frame_length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Tframes <span class="token operator">=</span> pad_signal<span class="token punctuation">[</span>np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>indices<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">,</span> copy<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># windowing</span>frames <span class="token operator">*=</span> np<span class="token punctuation">.</span>hamming<span class="token punctuation">(</span>frame_length<span class="token punctuation">)</span><span class="token comment"># fft</span>NFFT <span class="token operator">=</span> <span class="token number">512</span>mag_frames <span class="token operator">=</span> np<span class="token punctuation">.</span>absolute<span class="token punctuation">(</span>np<span class="token punctuation">.</span>fft<span class="token punctuation">.</span>rfft<span class="token punctuation">(</span>frames<span class="token punctuation">,</span> NFFT<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Magnitude of the FFT</span>pow_frames <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> NFFT<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>mag_frames <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># filter banks</span>nfilt<span class="token operator">=</span><span class="token number">40</span>low_freq_mel <span class="token operator">=</span> <span class="token number">0</span>high_freq_mel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2595</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>log10<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sr <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Convert Hz to Mel</span>mel_points <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>low_freq_mel<span class="token punctuation">,</span> high_freq_mel<span class="token punctuation">,</span> nfilt <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># Equally spaced in Mel scale</span>hz_points <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">700</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span><span class="token punctuation">(</span>mel_points <span class="token operator">/</span> <span class="token number">2595</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># Convert Mel to Hz</span><span class="token builtin">bin</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token punctuation">(</span>NFFT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> hz_points <span class="token operator">/</span> sr<span class="token punctuation">)</span>fbank <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>nfilt<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>NFFT <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> nfilt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f_m_minus <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment"># left</span>    f_m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token comment"># center</span>    f_m_plus <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># right</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>f_m_minus<span class="token punctuation">,</span> f_m<span class="token punctuation">)</span><span class="token punctuation">:</span>        fbank<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token builtin">bin</span><span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token builtin">bin</span><span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>f_m<span class="token punctuation">,</span> f_m_plus<span class="token punctuation">)</span><span class="token punctuation">:</span>        fbank<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token builtin">bin</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span>filter_banks <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>pow_frames<span class="token punctuation">,</span> fbank<span class="token punctuation">.</span>T<span class="token punctuation">)</span>filter_banks <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>filter_banks <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>finfo<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">.</span>eps<span class="token punctuation">,</span> filter_banks<span class="token punctuation">)</span>  <span class="token comment"># Numerical Stability</span>filter_banks <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>log10<span class="token punctuation">(</span>filter_banks<span class="token punctuation">)</span>  <span class="token comment"># dB</span><span class="token comment"># dct</span>num_ceps <span class="token operator">=</span> <span class="token number">24</span>mfcc <span class="token operator">=</span> dct<span class="token punctuation">(</span>filter_banks<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> norm<span class="token operator">=</span><span class="token string">'ortho'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>num_ceps <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">(</span>nframes<span class="token punctuation">,</span> ncoeff<span class="token punctuation">)</span> <span class="token operator">=</span> mfcc<span class="token punctuation">.</span>shape<span class="token comment"># liftering</span>n <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>ncoeff<span class="token punctuation">)</span>cep_lifter <span class="token operator">=</span><span class="token number">22</span>lift <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cep_lifter <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>np<span class="token punctuation">.</span>pi <span class="token operator">*</span> n <span class="token operator">/</span> cep_lifter<span class="token punctuation">)</span>mfcc <span class="token operator">*=</span> lift<span class="token comment"># normalize</span>filter_banks <span class="token operator">-=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>filter_banks<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1e-8</span><span class="token punctuation">)</span>mfcc <span class="token operator">-=</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>mfcc<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1e-8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="references">References</h2><ol type="1"><li><a href="https://haythamfayek.com/2016/04/21/speech-processing-for-machine-learning.html">Speech Processing for Machine Learning: Filter banks, Mel-Frequency Cepstral Coefficients (MFCCs) and What's In-Between</a></li><li><a href="https://blog.csdn.net/jojozhangju/article/details/18678861">语音特征参数MFCC提取过程详解</a></li><li><a href="https://zhuanlan.zhihu.com/p/24318554">语音识别第4讲：语音特征参数MFCC</a></li><li><a href="https://zhuanlan.zhihu.com/p/85299446">详解离散余弦变换（DCT）</a></li><li>Mohamed A. Deep Neural Network Acoustic Models for ASR[D]. University of Toronto, 2014.</li><li>Muda L, Begam M, Elamvazuthi I. Voice recognition algorithms using mel frequency cepstral coefficient (MFCC) and dynamic time warping (DTW) techniques[J]. arXiv preprint arXiv:1003.4083, 2010.</li><li>Zheng F, Zhang G, Song Z. Comparison of different implementations of MFCC[J]. Journal of Computer science and Technology, 2001, 16(6): 582-589.</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="SIGNAL PROCESSING" scheme="http://frankmartinem.github.io/categories/SIGNAL-PROCESSING/"/>
    
    
    <category term="Audio" scheme="http://frankmartinem.github.io/tags/Audio/"/>
    
  </entry>
  
  <entry>
    <title>tensorboard ssh</title>
    <link href="http://frankmartinem.github.io/2022/01/13/tensorboard-ssh/"/>
    <id>http://frankmartinem.github.io/2022/01/13/tensorboard-ssh/</id>
    <published>2022-01-13T15:30:51.000Z</published>
    <updated>2022-01-18T09:52:58.918Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="本地打开远程tensorboard">本地打开远程tensorboard</h1><h3 id="问题">问题</h3><p>在实验过程中，代码一般运行在服务器，但是连接服务器的图形界面一般比较麻烦，大部分情况下还是ssh连接。所以我们需要能在本地查看服务器上的代码运行进度。</p><h3 id="解决办法">解决办法</h3><p>如何解决这个问题呢？我们在服务器上运行tensorboard，设置好对应的端口，然后用ssh将本地的端口映射到服务器上tensorboard的端口。然后在本地浏览器打开localhost的对应端口，就能查看tensorboard的进度了。整个过程其实是一个映射的过程。</p><h3 id="代码">代码</h3><ul><li><p>在服务器上运行tensorboard </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tensorboard --logdir=&lt;log path&gt; --port=&lt;server port&gt; --host=&lt;server ip&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 其中log path是tensorboard的日志路径，server port是tensorboard的端口，注意不要和本地其他端口冲突。server ip是服务器的IP地址。<p></p></li><li><p>在本地运行ssh连接服务器 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ssh -L &lt;local port&gt;:&lt;server ip&gt;:6006 username@&lt;server ip&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 其中local port是本地的映射端口，server ip是服务器的ip地址，username是ssh的用户名。<p></p></li><li><p>在本地浏览器打开本地端口 打开浏览器，输入网址：localhost:<local port="">，就能查看tensorboard的进度了。</local></p></li></ul><h3 id="结果">结果</h3><figure><img src="/img/tensorboard_ssh-1.jpg" alt=""><figcaption>tensorboard in local</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEVELOPMENT" scheme="http://frankmartinem.github.io/categories/DEVELOPMENT/"/>
    
    
    <category term="ssh" scheme="http://frankmartinem.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>self-attention</title>
    <link href="http://frankmartinem.github.io/2022/01/10/self-attention/"/>
    <id>http://frankmartinem.github.io/2022/01/10/self-attention/</id>
    <published>2022-01-10T21:45:47.000Z</published>
    <updated>2022-01-18T09:52:18.831Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="self-attention">self attention</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEEP LEARNING" scheme="http://frankmartinem.github.io/categories/DEEP-LEARNING/"/>
    
    
    <category term="attention" scheme="http://frankmartinem.github.io/tags/attention/"/>
    
  </entry>
  
  <entry>
    <title>tmux command</title>
    <link href="http://frankmartinem.github.io/2022/01/07/tmux-command/"/>
    <id>http://frankmartinem.github.io/2022/01/07/tmux-command/</id>
    <published>2022-01-07T09:24:53.000Z</published>
    <updated>2022-01-23T19:31:23.634Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="tmux常用命令">tmux常用命令</h1><p>使用ssh连接服务器时，如果本地长时间没有操作，ssh会断开连接。这样会带来很多麻烦。首先是需要重新输入密码再连接，当然如果服务器有public key，这个过程可以省略。然后是ssh断开前的终端会自动关闭，这样如果是在跑代码的话，程序就中断了。为了解决这个问题，可以使用tmux，一个终端的多窗口管理工具。 tmux的作用很简单，就是新建终端，这个终端会一直保持在后台，即是ssh连接断开，终端也会继续运行。所以也就避免了上述的第二个问题。对于第一个问题，tmux在网络正常的情况下，是一直连接的。并不会出现ssh这种长时间不操作就断开的情况。tmux的主要用法如下：</p><ul><li>创建终端，这一步要在服务器上进行，在哪儿进行就是在哪台机器上新建终端，所以一般都是在服务器 <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tmux new -s &lt;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>这里的name是终端的名字，如果不设置的话，直接输入tmux就可以了，那么终端的名字默认是0，1，2以此类推。但是后期查找起来会很麻烦，如果终端很多的话。所以还是建议写个名字</p><ul><li>连接到已有的tmux终端</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tmux attach -t &lt;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的name就是上面的name。如果没设置的话，就是0，1，2这些数字编号。如果忘记了终端的名字，那么可以用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tmux ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述命令可以查询已有的tmux终端名字</p><ul><li>分离终端，如果需要关闭某一个终端，可以使用这一命令。值得注意的是，此命令只会关闭终端显示，但是仍旧会在后台运行</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tmux detach<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一命令没有参数，在哪个tmux终端窗口运行就detach哪个</p><ul><li>切换终端</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tmux switch -t &lt;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将当前终端切换到另外一个终端</p><ul><li>退出终端</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tmux kill-session -t &lt;name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这一命令会退出当前的终端，其中运行的任务也会自动终止</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEVELOPMENT" scheme="http://frankmartinem.github.io/categories/DEVELOPMENT/"/>
    
    
    <category term="ssh" scheme="http://frankmartinem.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Conditional Generative Adversarial Nets</title>
    <link href="http://frankmartinem.github.io/2021/12/25/Conditional-Generative-Adversarial-Nets/"/>
    <id>http://frankmartinem.github.io/2021/12/25/Conditional-Generative-Adversarial-Nets/</id>
    <published>2021-12-25T20:46:40.000Z</published>
    <updated>2022-01-18T09:45:24.687Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="conditional-generative-adversarial-nets">Conditional Generative Adversarial Nets</h1><h2 id="references">References</h2><ol type="1"><li>Conditional Generative Adversarial Nets (https://arxiv.org/pdf/1411.1784.pdf)</li><li>Image-to-Image Translation with Conditional Adversarial Networks (https://arxiv.org/pdf/1611.07004.pdf)</li></ol><h2 id="introduction">Introduction</h2><p>本文主要介绍GAN的一种改进形式，Conditional GAN。原始的GAN更多的关注于数据的生成，但是由于输入的随机性，所以GAN生成数据具有很强的随机性。数据生成很”自由“。对于目前的应用来说，我们更希望是生成的数据能是受控制的，是和输入有关的。于是就有了CGAN。</p><h2 id="methods">Methods</h2><p>CGAN的基本框架如图-1所示。主要的改进就是在生成器和判别器的输入中都加入了label。生成器中加入label，可以生成对应的数据，即生成的数据分布和label相关<span class="math inline">\(G(z|y)\)</span>。判别器中加入label，可以判断数据是否和label相关。这样经过CGAN的损失函数迭代，可以使得生成的数据越来越靠近label对应的数据分布。 <img src="/img/Conditional-Generative-Adversarial-Nets-1.jpg" alt="图-1: CGAN基本框架"> CGAN的损失函数为： <span class="math display">\[\underset{G}{min} \underset{D}{max} V(D, G) = E_{x \sim p_{data}(x)}[log(D(x|y))]+E_{z \sim p_{z}}[log(1-D(G(z|y)))]\]</span> 其中，<span class="math inline">\(x\)</span>是真实数据，<span class="math inline">\(y\)</span>是label，<span class="math inline">\(z\)</span>是用于生成数据的噪声信号。</p><h2 id="applications">Applications</h2><p>CGAN的应用很广泛，可以用来生成特定风格的图像，或者特定的文字等内容。例如在pix2pix中[2]，我们用CGAN根据图像轮廓去进行颜色填充，根据地图轮廓去生成真实图像等。根据黑夜的图像生成白天的图像等。图2展示了根据轮廓进行颜色填充。 <img src="/img/Conditional-Generative-Adversarial-Nets-2.jpg" alt="图2: pix2pix生成图像"></p><p>参考文献[2]总结了CGAN生成图像时的一些常用的技巧，例如loss function的定义，patchGAN的应用等。文章中提到了，现有的生成模型的损失函数主要集中于计算像素点直接的平均距离，这样很容易忽视局部的信息，导致生成图像模糊。所以文章的改进如下： - 在CGAN的损失函数中加入L1范数，关注全局的相似度；而CGAN本身的损失函数则关注于图像的轮廓等局部信息 GAN的损失函数： <span class="math display">\[L_{GAN}(G, D) = \underset{G}{min}\underset{D}{max}E_y[log(D(y))]+E_{x, z}[log(1-D(G(x, z)))]\]</span> L1范数： <span class="math display">\[L_{L1}(G) = E_{(x,y,z)} ||(y - G(x, z))||^1 \]</span> 损失函数： <span class="math display">\[G^* = L_{GAN}(G, D) + \lambda * L_{L1}(G)\]</span> - 加入dropout，BatchNorm层 - 生成器的CNN网络使用U-Net结构，并采用skip连接 - 使用Markovian判别器(PatchGAN)，更加关注于图像局部信息</p><h2 id="experiment">Experiment</h2><p>基于CGAN的原理，利用MNIST数据集，输入为图像的标签和噪声，生成图像，判断生成图像的标签和真实图像标签是否相同。 代码链接：<a href="https://github.com/FrankMartinem/Algorithm">CGAN代码</a> 原始图像如图3所示，生成图像如图4所示。 <img src="/img/Conditional-Generative-Adversarial-Nets-3.png" alt="图3: 原始图像"> <img src="/img/Conditional-Generative-Adversarial-Nets-4.png" alt="图3: 生成图像"> 可以看出，生成图像的数字和原始数据是相似的。</p><h2 id="summary">Summary</h2><p>CGAN相较于GAN，加入了label，使得数据生成更加可控，生成的数据和label更加相关。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEEP LEARNING" scheme="http://frankmartinem.github.io/categories/DEEP-LEARNING/"/>
    
    
    <category term="cgan" scheme="http://frankmartinem.github.io/tags/cgan/"/>
    
  </entry>
  
  <entry>
    <title>Generative Adversarial Nets</title>
    <link href="http://frankmartinem.github.io/2021/12/23/Generative-Adversarial-Nets/"/>
    <id>http://frankmartinem.github.io/2021/12/23/Generative-Adversarial-Nets/</id>
    <published>2021-12-23T17:40:39.000Z</published>
    <updated>2022-01-18T09:45:36.815Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="generative-adversarial-nets">Generative Adversarial Nets</h1><h2 id="references">References</h2><p>参考文献： Goodfellow et al., 2014. Generative Adversarial Nets.</p><h2 id="introduction">Introduction</h2><p>本文将介绍对抗生成网络（GAN）的基础框架，以及主要的推导过程。</p><p>首先是GAN的基本概念：GAN的主要思想是博弈。利用生成器<span class="math inline">\(G\)</span>和判别器<span class="math inline">\(D\)</span>的博弈。来使得生成器能够准确生成出类似于原始数据分布的样本；同时在博弈过程中，使得判别器能更加准确的区分出原始数据和生成数据。</p><h2 id="method">Method</h2><p>假设有一组样本<span class="math inline">\(data\)</span>，其数据分布为<span class="math inline">\(p_{data}\)</span>。生成器<span class="math inline">\(G\)</span>根据一组噪声数据<span class="math inline">\(z\)</span>，其分布为<span class="math inline">\(p_z\)</span>，生成一组数据<span class="math inline">\(G(z)\)</span>，判别器为<span class="math inline">\(D\)</span>。其中生成器和判别器的参数分别为<span class="math inline">\(\theta_{g}\)</span>和<span class="math inline">\(\theta_{d}\)</span>。 那么，生成器的目标是使得生成的数据<span class="math inline">\(G(z)\)</span>更接近真实数据分布<span class="math inline">\(p_{data}\)</span>，也就是说<span class="math inline">\(log[D(G(z))]\)</span>要尽可能大。然后对于判别器<span class="math inline">\(D\)</span>，其对于真实数据的判别要更准确，即<span class="math inline">\(log[D(x)]\)</span>要尽可能大。所以，根据上述问题可以构造以下条件： <span class="math display">\[\underset{G}{min} \underset{D}{max} E_{x \sim p_{data}(x)}[log(D(x))] + E_{z \sim p_{z}[log(1-D(G(z)))]}\]</span></p><p>Goodfellow的论文中给出了下面的图，可以解释GAN的迭代过程。蓝线是判别器输出的数据分布；绿线是生成器输出的数据分布；黑线是真实的数据分布；<span class="math inline">\(z\)</span>是噪声数据，通过生成器映射到数据<span class="math inline">\(x\)</span>。从而计算生成器输出的分布。在一开始，生成器<span class="math inline">\(G\)</span>的输出分布和真实的分布差距很大，判别器可以很轻易的区分生成数据和真实数据；但是也仅限于中间的部分，对于两者重合的部分，判别器的区分效果并不好；然后在(b)图中，对判别器参数进行迭代优化（后面会证明，判别器的参数存在最优解），使得判别器的输出结果更加稳定平滑也更加准确；(c)图中迭代了生成器的参数，使得生成的数据更接近真实数据。如此循环迭代后，最理想的状态即是达到(d)图，判别器无法区分生成数据和真实数据，生成数据的分布和真实数据相等。 <img src="/img/Generative-Adversarial-Nets-1.png" alt="图-1: GAN的迭代过程"></p><p>所以GAN的训练过程如图-2所示： <img src="/img/Generative-Adversarial-Nets-2.jpg" alt="图-2: GAN算法"></p><p>GAN的上述迭代过程能找到使得<span class="math inline">\(G(z)\)</span>的分布<span class="math inline">\(p_g\)</span>更接近<span class="math inline">\(p_{data}\)</span>的最优解，必须满足以下条件： 1. 上述最优化问题有唯一解（全局最优解）<span class="math inline">\(G^{*}\)</span>，且该解满足<span class="math inline">\(p_g=p_{data}\)</span> 2. 上述最优化问题最终收敛（条件-1的必要条件）</p><p>要证明上述条件成立，可以先证明在生成器<span class="math inline">\(G\)</span>固定时，判别器<span class="math inline">\(D\)</span>的参数具有最优解（根据算法-1的迭代过程来推导）。证明如下： <span class="math display">\[V(G, D) = \int_{x}p_{data}(d)log(D(x))dx + \int_{z}p_z(z)log(1-D(G(z)))dz\]</span> <span class="math display">\[=\int_{x}p_{data}(d)log(D(x)) + p_{g}p_g(x)log(1-D(x)) dx\]</span> （主要是第二项，这里并不是换元转换，因为<span class="math inline">\(G\)</span>并不一定可逆，这里是基于Radon-Nikodym定理。具体证明方法这里不深究） 要使得<span class="math inline">\(V(G, D)\)</span>取得最大值，<span class="math inline">\(D(x)\)</span>就需要使函数<span class="math inline">\(f(D) = p_{data}log(D) + p_{g}log(1-D)\)</span>取最大值，根据拉格朗日中值定理，可以计算得到：取最大值的<span class="math inline">\(D(x)\)</span>应该满足<span class="math inline">\(D^{*}(x) = \frac{p_{data}}{p_{data}+p_{g}}\)</span>。 所以，生成器<span class="math inline">\(G\)</span>固定时，判别器<span class="math inline">\(D\)</span>的参数具有最优解，该最优解满足<span class="math inline">\(D(x) = \frac{p_{data}}{p_{data}+p_{g}}\)</span></p><p>然后，需要证明当且仅当<span class="math inline">\(p_g=p_{data}\)</span>时，训练函数<span class="math inline">\(C(G) = \underset{D}{max}V(G, D)\)</span>取得全局最小值。证明如下： 当<span class="math inline">\(p_g=p_{data}\)</span>，根据上述推导可知<span class="math inline">\(D(x) = \frac{1}{2}\)</span>。带入到<span class="math inline">\(V(G, D)\)</span>中，可得： <span class="math display">\[V(G, D^*) = \int_{x}p_{data}(x)log(\frac{1}{2})+p_{g}(x)log(1-\frac{1}{2})dx\]</span> <span class="math display">\[ = -log(2)\int_{x}p_{data}(x)dx-log(2)\int_{x}p_{g}(x)dx\]</span> <span class="math display">\[ = -log(2) - log(2) = -log(4)\]</span> （概率的积分是1） 所以当<span class="math inline">\(p_g=p_{data}\)</span>时，训练函数的值是<span class="math inline">\(-log(4)\)</span>，下面需要证明这是最小值，且只有<span class="math inline">\(p_g=p_{data}\)</span>时条件才成立。于是我们假设<span class="math inline">\(p_g \neq p_{data}\)</span>。但是判别器<span class="math inline">\(D\)</span>仍旧取得最优解。所以有： <span class="math display">\[V(G, D^*) = \int_{x}p_{data}(x)log(\frac{p_{data}}{p_{data}+p_{g}}) + p_{g}(x)log(\frac{p_{g}}{p_{data}+p_{g}})dx\]</span> <span class="math display">\[= \int_{x}(log(2)-log(2))p_{data}(x) + p_{data}(x)log(\frac{p_{data}}{p_{data}+p_{g}}) + \]</span> <span class="math display">\[ \int_{x}(log(2)-log(2))p_{g}(x) + p_{g}(x)log(\frac{p_{g}}{p_{data}+p_{g}})dx\]</span> <span class="math display">\[= -log(2)\int_{x}p_{g}(x)+p_{data}(x)dx + \int_{x}p_{data}(x)(log(2)+log(\frac{p_{data}}{p_{data}+p_{g}}))dx + \]</span> <span class="math display">\[ \int_{x}p_{g}(log(2) + log(\frac{p_{g}}{p_{data}+p_{g}})dx\]</span> <span class="math display">\[= -log(4) + \int_{x}p_{data}(x)log(\frac{p_{data}}{(p_{data}+p_{g})/2})) + \int_{x}p_{g}(x)log(\frac{p_{g}}{(p_{data}//2+p_{g})/2})\]</span> 根据KL散度的定义，可以得到： <span class="math display">\[V(G, D^*) = -log(4) + KL(p_{data}|\frac{p_{data}+p_{g}}{2}) + KL(p_{g}|\frac{p_{data}+p_{g}}{2})\]</span> 由于<span class="math inline">\(KL(p|q) \geq 0\)</span>，所以<span class="math inline">\(V(G, D)\)</span>当且仅当<span class="math inline">\(p_{data}=p_{g}\)</span>时取得最小值<span class="math inline">\(-log(4)\)</span>。 (<span class="math inline">\(KL(p_{data}|\frac{p_{data}+p_{g}}{2}) + KL(p_{g}|\frac{p_{data}+p_{g}}{2}) = JSD(p_{data}|p_{g}\)</span>，论文中是根据Jensen–Shannon散度来计算的。结论是一致的)</p><p>最后是关于<span class="math inline">\(C(G) = V(G, D)\)</span>的收敛的证明。论文中的证明主要是根据导数的特性，以及分布<span class="math inline">\(p_{g}\)</span>属于凸函数的特点来证明的。</p><h2 id="experiment">Experiment</h2><p>基于GAN的原理，本文使用MNIST数据集进行实验。判断GAN是否能生成和MNIST数据集很像的图像。 <a href="https://github.com/FrankMartinem/Algorithm">代码链接</a> 原始的MNIST数据如图3所示。生成的数据如图4所示。 <img src="/img/Generative-Adversarial-Nets-3.png" alt="图3：MNIST原始数据"> <img src="/img/Generative-Adversarial-Nets-4.png" alt="图4：生成的数据"> ## Summary 以上就是最基础的GAN的概念以及推导过程。尽管已经证明了GAN的推导过程的可行性。但是在实际应用中，要使得GAN收敛并得到好的效果，还需要一些训练技巧。 - 首先是GAN的收敛问题，虽然已经证明GAN的迭代函数是收敛的，但是收敛的前提是生成器函数为凸函数。且由于神经网络迭代的特性。我们无法确定神经网络是通过何种策略调整，来达到纳什均衡的（也就是GAN有很好的表现的状态，论文中的观点）。 - 然后是<span class="math inline">\(p_{g}\)</span>没办法显示表示，因为是生成器的输出。然后是<span class="math inline">\(p_{data}\)</span>未知，虽然可以根据这一分布计算<span class="math inline">\(D\)</span>的最优解，但是并没有办法求出具体数值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEEPLEARNING" scheme="http://frankmartinem.github.io/categories/DEEPLEARNING/"/>
    
    
    <category term="gan" scheme="http://frankmartinem.github.io/tags/gan/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://frankmartinem.github.io/2021/12/20/hello-world/"/>
    <id>http://frankmartinem.github.io/2021/12/20/hello-world/</id>
    <published>2021-12-19T23:04:45.831Z</published>
    <updated>2021-12-20T15:39:48.253Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Config Python for Unroot Users</title>
    <link href="http://frankmartinem.github.io/2021/12/14/Config-Python-for-Unroot-Users/"/>
    <id>http://frankmartinem.github.io/2021/12/14/Config-Python-for-Unroot-Users/</id>
    <published>2021-12-14T09:07:05.000Z</published>
    <updated>2022-01-18T09:38:16.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="服务器非管理员配置python环境">服务器非管理员配置python环境</h1><h2 id="introduction">Introduction</h2><p>Linux服务器配置python环境时，默认的安装位置是"/usr/bin"。但没有管理员权限时是无法写文件到当前路径的。而且多人共用一个服务器时，大家的python环境各不相同，每个人也会配置自己的python环境。所以在home文件夹安装配置自己的python环境是更合适的。一下是在没有root权限的情况下配置python的方法。</p><h2 id="method">Method</h2><ol type="1"><li>下载python source code到home/your name 文件夹：</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https://www.python.org/ftp/python/3.10.1/Python-3.10.1.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里以python-3.10.1为例，可以从<a href="https://www.python.org/downloads/source/">python官网</a>下载对应版本的源代码</p><ol start="2" type="1"><li>解压文件</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd download dirtar -xzvf Python-3.10.1.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3" type="1"><li><p>下载好以后，如果直接安装，会有以下的问题：首先是openssl，用于软件的安全通信，避免被窃听的一个toolkit。一般是系统级的app；然后是zlib，这个组件用于数据压缩和解压，如果需要使用科学计算的库，那么zlib是必须的；最后是libffi，相当于C的编译器，同样也是用于科学计算。上述组件均可以通过管理员sudo，yum安装。但是如果没有管理员权限，那么需要自行安装。</p></li><li><p>安装openssl</p><ol type="1"><li><p>下载并解压<a href="https://www.openssl.org/source/">openssl</a></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https://www.openssl.org/source/openssl-3.0.0.tar.gztar -xzvf openssl-3.0.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>编译并安装</p></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd openssl-3.0.0.tar.gz./config --prefix=/home/your name/openssl_dirmake -j48 make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装<a href="http://www.zlib.net/">zlib</a></p><ol type="1"><li>下载，解压，编译并安装</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget http://www.zlib.net/zlib-1.2.11.tar.gztar -xzvf zlib-1.2.11.tar.gzcd zlib-1.2.11.tar.gz./configure --prefix=/home/your name/zlib_dirmake -j48make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装<a href="https://github.com/libffi/libffi/releases">libffi</a></p><ol type="1"><li>下载，解压，编译并安装</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https://github.com/libffi/libffi/releases/download/v3.4.2/libffi-3.4.2.tar.gztar -xzvf libffi-3.4.2.tar.gzcd libffi-3.4.2.tar.gz./configure --prefix=/home/your name/libffimake -j48make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将上述安装文件的路径写入环境变量</p></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/home/your name/libffi_dir/lib/pkgconfigexport LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/home/your_name/openssl_dir/lib:/home/your name/zlib_dir/lib:/home/your_name/libffi_dir/libexport PKG_CONFIG_PATH=/home/jacob/libffi/lib/pkgconfigexport CFLAGS=-I/home/your name/libffi_dir/includeexport LDFLAGS=-L/home/your name/libffi_dir/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8" type="1"><li>进入python的setup文件，修改部分编译信息</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd python_path/Modules/vim Setup.dist# 取消下面的注释SSL=/home/your name/openssl_dir_ssl _ssl.c -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl -L$(SSL)/lib -lssl -lcryptozlib zlibmodule.c -I/home/your name/zlib_dir/include -L/home/your name/zlib_dir/lib -lz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9" type="1"><li>编译python代码，这里需要gcc编译器，一般Linux发行版都自带gcc编译器，如果没有安装，请联系管理员。同时，编译过程需要配置特定的参数</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd Python-3.10.1./configure LDFLAGS="-L/home/your name/libffi_dir/lib64 -Wl,--rpath=/home/your name/libffi_dir/lib64" CFLAGS="-I/home/your name/libffi_dir/include" PKG_CONFIG_PATH="${libffi}/lib/pkgconfig" --prefix=/home/your name/your path --with-openssl=/home/your name/openssl_dirmake # make -j48 这里不推荐，因为会编译所有的test file，耗时较长，机器快的话也要20min-30min左右make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="summary">Summary</h2><p>以上就是非管理员账户在home文件夹安装自己的python环境的方法。这种方法能安装简易的python环境，但是如果需要很复杂的计算，例如scikt，pytorch，tensorflow等强烈依赖底层C链接库的模块，那么上述方法或许可行。因为整个过程无非是把库文件的源代码安装到了home文件夹里，然后修改环境变量配置。但是如果真的是很复杂的编译和依赖，不建议使用上述方法。上述方法主要参考以下博客和文章：</p><ol type="1"><li><a href="https://blog.csdn.net/u012440550/article/details/109371016">CSDN</a></li><li><a href="https://stackoverflow.com/questions/65691539/locally-compiled-libffi-files-not-getting-picked-up-while-recompiling-python-3-p">Stackoverflow</a></li><li><a href="https://hellovimo.github.io/uvm_testbench_gen/localpythoninstall.html">Github Pages</a></li></ol><p>那么，针对Introduction提出的问题，每个人都需要自定义自己的python环境，是否有更好的解决方法呢。答案是<strong>有的</strong>，那就是由管理员安装python到usr目录。然后每个人可以在home文件夹新建自己的虚拟环境。只需要使用pip3命令即可：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python3 -m pip install --user virtualenvpython3 -m venv /home/your name/python_dir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEVELOPMENT" scheme="http://frankmartinem.github.io/categories/DEVELOPMENT/"/>
    
    
    <category term="linux" scheme="http://frankmartinem.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>pytorch note</title>
    <link href="http://frankmartinem.github.io/2021/12/13/pytorch-note/"/>
    <id>http://frankmartinem.github.io/2021/12/13/pytorch-note/</id>
    <published>2021-12-13T10:11:16.000Z</published>
    <updated>2022-01-18T09:51:00.615Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="pytorch-笔记">Pytorch 笔记</h1><ol type="1"><li>Pytorch的中，tensor切片时不需要写全所有的维度</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchx <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> xtensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.6691</span><span class="token punctuation">,</span> <span class="token number">0.2031</span><span class="token punctuation">,</span> <span class="token number">0.4246</span><span class="token punctuation">,</span> <span class="token number">0.7182</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token number">0.7533</span><span class="token punctuation">,</span> <span class="token number">0.5432</span><span class="token punctuation">,</span> <span class="token number">0.8189</span><span class="token punctuation">,</span> <span class="token number">0.2309</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token number">0.7979</span><span class="token punctuation">,</span> <span class="token number">0.6861</span><span class="token punctuation">,</span> <span class="token number">0.9331</span><span class="token punctuation">,</span> <span class="token number">0.6360</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.3718</span><span class="token punctuation">,</span> <span class="token number">0.9343</span><span class="token punctuation">,</span> <span class="token number">0.3975</span><span class="token punctuation">,</span> <span class="token number">0.8068</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token number">0.3031</span><span class="token punctuation">,</span> <span class="token number">0.7124</span><span class="token punctuation">,</span> <span class="token number">0.5972</span><span class="token punctuation">,</span> <span class="token number">0.7359</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token number">0.6043</span><span class="token punctuation">,</span> <span class="token number">0.1800</span><span class="token punctuation">,</span> <span class="token number">0.4715</span><span class="token punctuation">,</span> <span class="token number">0.8611</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.6691</span><span class="token punctuation">,</span> <span class="token number">0.2031</span><span class="token punctuation">,</span> <span class="token number">0.4246</span><span class="token punctuation">,</span> <span class="token number">0.7182</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token number">0.7533</span><span class="token punctuation">,</span> <span class="token number">0.5432</span><span class="token punctuation">,</span> <span class="token number">0.8189</span><span class="token punctuation">,</span> <span class="token number">0.2309</span><span class="token punctuation">]</span><span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token number">0.7979</span><span class="token punctuation">,</span> <span class="token number">0.6861</span><span class="token punctuation">,</span> <span class="token number">0.9331</span><span class="token punctuation">,</span> <span class="token number">0.6360</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2" type="1"><li>torch.cat 可以拼接list</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> x <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> xtensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.6009</span><span class="token punctuation">,</span> <span class="token number">0.1935</span><span class="token punctuation">,</span> <span class="token number">0.3899</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.8208</span><span class="token punctuation">,</span> <span class="token number">0.1878</span><span class="token punctuation">,</span> <span class="token number">0.9621</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> y <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> y<span class="token punctuation">[</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.6009</span><span class="token punctuation">,</span> <span class="token number">0.1935</span><span class="token punctuation">,</span> <span class="token number">0.3899</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.8208</span><span class="token punctuation">,</span> <span class="token number">0.1878</span><span class="token punctuation">,</span> <span class="token number">0.9621</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.6009</span><span class="token punctuation">,</span> <span class="token number">0.1935</span><span class="token punctuation">,</span> <span class="token number">0.3899</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.8208</span><span class="token punctuation">,</span> <span class="token number">0.1878</span><span class="token punctuation">,</span> <span class="token number">0.9621</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.6009</span><span class="token punctuation">,</span> <span class="token number">0.1935</span><span class="token punctuation">,</span> <span class="token number">0.3899</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.8208</span><span class="token punctuation">,</span> <span class="token number">0.1878</span><span class="token punctuation">,</span> <span class="token number">0.9621</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.6009</span><span class="token punctuation">,</span> <span class="token number">0.1935</span><span class="token punctuation">,</span> <span class="token number">0.3899</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.8208</span><span class="token punctuation">,</span> <span class="token number">0.1878</span><span class="token punctuation">,</span> <span class="token number">0.9621</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.6009</span><span class="token punctuation">,</span> <span class="token number">0.1935</span><span class="token punctuation">,</span> <span class="token number">0.3899</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.8208</span><span class="token punctuation">,</span> <span class="token number">0.1878</span><span class="token punctuation">,</span> <span class="token number">0.9621</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.6009</span><span class="token punctuation">,</span> <span class="token number">0.1935</span><span class="token punctuation">,</span> <span class="token number">0.3899</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.8208</span><span class="token punctuation">,</span> <span class="token number">0.1878</span><span class="token punctuation">,</span> <span class="token number">0.9621</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.6009</span><span class="token punctuation">,</span> <span class="token number">0.1935</span><span class="token punctuation">,</span> <span class="token number">0.3899</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.8208</span><span class="token punctuation">,</span> <span class="token number">0.1878</span><span class="token punctuation">,</span> <span class="token number">0.9621</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.6009</span><span class="token punctuation">,</span> <span class="token number">0.1935</span><span class="token punctuation">,</span> <span class="token number">0.3899</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token number">0.8208</span><span class="token punctuation">,</span> <span class="token number">0.1878</span><span class="token punctuation">,</span> <span class="token number">0.9621</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3" type="1"><li>torch.contiguous()函数用于确保tensor的底层是按照行优先排序的。Tensor底层实现是使用一块连续内存的1维数组，Tensor在元信息里保存了多维数组的形状，在访问元素时，通过多维度索引转化成1维数组相对于数组起始位置的偏移量即可找到对应的数据。某些Tensor操作（如transpose、permute、narrow、expand）与原Tensor是共享内存中的数据，不会改变底层数组的存储，但原来在语义上相邻、内存里也相邻的元素在执行这样的操作后，在语义上相邻，但在内存不相邻，即不连续了（<em>is not contiguous</em>）。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEEP LEARNING" scheme="http://frankmartinem.github.io/categories/DEEP-LEARNING/"/>
    
    
    <category term="notes" scheme="http://frankmartinem.github.io/tags/notes/"/>
    
    <category term="pytorch" scheme="http://frankmartinem.github.io/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>Log Likelihood</title>
    <link href="http://frankmartinem.github.io/2021/12/05/Log-Likelihood/"/>
    <id>http://frankmartinem.github.io/2021/12/05/Log-Likelihood/</id>
    <published>2021-12-05T19:23:33.000Z</published>
    <updated>2022-01-18T09:49:29.272Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="极大似然估计---log-likelihood">极大似然估计 - Log Likelihood</h1><h2 id="introduction">Introduction</h2><p>极大似然估计是传统机器学习以及深度学习中都常用的计算方法。其主要的目的，是根据现有的数据分布，估计采样得到现有数据的更大的数据集的分布。</p><h2 id="method">Method</h2><h3 id="定义">定义</h3><p>假设从一个很大的数据集中采集到有<span class="math inline">\(m\)</span>个数据的数据集<span class="math inline">\(X=\{x_1,...,x_m\}\)</span>。所以原始的很大的数据集的分布为<span class="math inline">\(P_{data}(x)\)</span>。根据数据计算得到的分布为<span class="math inline">\(P_{model}(x; \theta)\)</span>。其中<span class="math inline">\(\theta\)</span>是模型的参数。所以：</p><p><span class="math display">\[\theta= \underset{\theta}{\operatorname{arg max}}P_{model}(x;\theta)\]</span></p><p><span class="math display">\[\theta= \underset{\theta}{\operatorname{arg max}}\prod_{i=1}^{m}P_{model}(x_i;\theta)\]</span></p><p>这里直接计算概率连乘很不方便，而且容易出现极小值。由于log函数的单调性，且能处理连乘问题，所以这里取对数。</p><p><span class="math display">\[\theta = \underset{\theta}{\operatorname{arg max}}\sum_{i=1}^{m}log(P_{model}(x_i; \theta))\]</span></p><p>求和符号的计算仍旧存在些许不方便，所以这里缩放<span class="math inline">\(m\)</span>倍，且数据从当前数据集中提取，当前数据集的经验分布设为<span class="math inline">\(\hat{P_{data}}\)</span>。 所以： <span class="math display">\[\theta=\underset{\theta}{\operatorname{arg max}} E_{x \sim \hat{P_{data}}}(P_{model}(x;\theta))\]</span></p><p>以上就是极大似然函数。</p><h3 id="kl散度视角">KL散度视角</h3><p>根据问题的描述，我们需要求解数据的分布<span class="math inline">\(P_{model}(x; \theta)\)</span>，使得其最接近数据集的分布<span class="math inline">\(\hat{P_{data}}(x)\)</span>。从KL散度出发，即需要最小化两者的KL散度（注意：KL散度计算是有顺序的，即<span class="math inline">\(D_{KL}(P||Q) \neq D_{KL}(Q||P)\)</span>。 KL散度计算如下：</p><p><span class="math display">\[D_{KL}(P_{data}(x)|| P_{model}(x; \theta))=E_{x\sim\hat P_{data}}[log(\hat P_{data}(x)) - log(P_{model}(x; \theta))]\]</span></p><p>第一项和模型参数无关，所以计算时只需要最小化第二项，即： <span class="math display">\[\theta = \underset{\theta}{\operatorname{arg max}} -log(P_{model}(x; \theta))\]</span></p><p>这一步骤和定义中的最大化是相同的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="MACHINE LEARNING" scheme="http://frankmartinem.github.io/categories/MACHINE-LEARNING/"/>
    
    
    <category term="probability" scheme="http://frankmartinem.github.io/tags/probability/"/>
    
  </entry>
  
  <entry>
    <title>SVD-UKF</title>
    <link href="http://frankmartinem.github.io/2021/09/24/SVD-UKF/"/>
    <id>http://frankmartinem.github.io/2021/09/24/SVD-UKF/</id>
    <published>2021-09-24T17:52:00.000Z</published>
    <updated>2022-01-18T09:52:40.811Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="unscented-kalman-filter-based-on-svd">Unscented Kalman Filter based on SVD</h3><h4 id="问题">问题</h4><p>无迹卡尔曼滤波（Unscented Kalman Filter）是卡尔曼滤波（Kalman Filter）的改进版，其中取消了卡尔曼滤波中对于观测变量的一阶线性隐马尔可夫链的约束，也取消了观测变量和测量变量之间的线性关系。取而代之的是任意的函数，然后用无迹变换（Unscented Transform）来估计观测变量变化时以及观测变量和测量变量变化时的概率分布变化。但是，无迹卡尔曼滤波在计算时需要计算协方差矩阵的Cholesky分解，这一步需要保证协方差矩阵是正定矩阵。在真实计算中，由于观测变量可能有多维，且互相之间可能互相独立，导致协方差矩阵不一定是正定矩阵。也有可能由于参数的选择不当，导致协方差矩阵不满足正定矩阵的要求。从而导致计算无法进行。这也是无迹卡尔曼滤波中需要注意的地方。</p><h4 id="解决方法">解决方法</h4><p>对于协方差矩阵非正定的问题，目前有两种解决办法。一种是选择合适的参数。但是这种方法比较依赖经验，需要多次测试调整。第二种方法就是基于SVD的无迹卡尔曼滤波。这种方法利用奇异值分解（SVD）方法，将协方差矩阵分解为对角矩阵和另外两个矩阵。由于协方差矩阵中，对角线上的值一定是正的，因为对角线上的值就是不同维度的观测变量的方差。所以对角矩阵的值肯定是正的，所以可以开根号。协方差矩阵分解的计算方法如下： <span class="math display">\[[S, V, D] = SVD(P)\]</span> <span class="math display">\[P_{est} = S * \sqrt{V}\]</span> 用上述步骤，替换无迹卡尔曼滤波计算中的Cholesky分解，即得到基于SVD的无迹卡尔曼滤波。因为协方差矩阵是对称的，所以<span class="math inline">\(S\)</span>的转置矩阵是<span class="math inline">\(D\)</span>，计算时只考虑一边即可。其余的计算步骤参考 [Unscented Kalman Filter]: https://frankmartinem.github.io/2020/01/21/Unscented-Kalman-Filter/</p><h4 id="参考文献">参考文献</h4><ol type="1"><li>An Improved Unscented Kalman Filter Algorithm for Radar Azimuth Mutation</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="MACHINE LEARNING" scheme="http://frankmartinem.github.io/categories/MACHINE-LEARNING/"/>
    
    
    <category term="ukf" scheme="http://frankmartinem.github.io/tags/ukf/"/>
    
  </entry>
  
  <entry>
    <title>SSH Download and Upload</title>
    <link href="http://frankmartinem.github.io/2021/08/13/SSH-Download-and-Upload/"/>
    <id>http://frankmartinem.github.io/2021/08/13/SSH-Download-and-Upload/</id>
    <published>2021-08-13T07:34:41.000Z</published>
    <updated>2022-01-18T09:52:28.500Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ssh-从服务器下载文件或者上传文件以及文件夹">SSH 从服务器下载文件或者上传文件以及文件夹</h1><ol type="1"><li>从服务器下载文件 <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">scp yourname@IP address:/path to your file/ /local path/scp frank@10.212.48.177:~/Downloads/test.py ~/Downloads<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>从服务器下载文件夹 <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">scp -r yourname@IP address:/path to your folder/ /local path/scp -r frank@10.212.48.177:~/Downloads/test ~/Downloads<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>上传文件到服务器 <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">scp /path to your file/ yourname@IP address:/remote path/scp ~/Downloads/test.py frank@10.212.48.177:~/Downloads<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>上传文件夹到服务器 <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">scp -r /path to your folder/ yourname@IP address:/remote path/scp -r ~/Downloads/test frank@10.212.48.177:~/Downloads<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> 注意，服务器的IP地址后的冒号和文件地址，文件夹地址之间没有空格</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEVELOPMENT" scheme="http://frankmartinem.github.io/categories/DEVELOPMENT/"/>
    
    
    <category term="ssh" scheme="http://frankmartinem.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Git Clone Part of Repository</title>
    <link href="http://frankmartinem.github.io/2021/08/12/Git-Clone-Part-of-Repository/"/>
    <id>http://frankmartinem.github.io/2021/08/12/Git-Clone-Part-of-Repository/</id>
    <published>2021-08-12T08:36:05.000Z</published>
    <updated>2022-01-18T09:46:07.381Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="git下载单个仓库的文件">git下载单个仓库的文件</h1><p>如果一个仓库的文件很多，但是又只需要其中的一部分，这时下载全部的文件会很浪费时间，毕竟github的下载速度也慢。所以就需要想办法只下载部分文件。下面介绍三种方法。 ## git指令下载 git目前已经支持通过修改配置文件来下载单个文件，这里以我自己的仓库为例，项目仓库结构如图所示。我需要下载Algorithm项目下的Kalman整个文件夹，以及Wiener-Filter文件夹下的wienerfilter.py文件。那么可以通过如下方法实现。 <img src="/img/Git-Clone-Part-of-Repository-1.png" alt="项目截图"> 1. 首先新建一个文件夹，然后clone整个仓库的结构以及git的改动文件。 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mkdir filecd filegit initgit remote add -f origin &lt;url of target repository&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre> 2. 然后配置git config文件，将sparsecheckout设置为true，即允许从仓库中下载部分的文件 <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git config core.sparseCheckout true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 3. 将你需要下载的文件添加到config文件中，对于例子中的要求，配置如下 <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">echo "Kalman" &gt;&gt; .git/info/sparse-checkoutecho "Wiener-Filter/wienerfilter.py" &gt;&gt; .git/info/sparse-checkout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> 4. 然后直接拉取项目，然后会根据配置文件拉取对应的文件 <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git pull origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 命令行截图如图所示 <img src="/img/Git-Clone-Part-of-Repository-2.png" alt="命令行截图"> 可以看出，最终只下载了需要的代码。详细的git sparse checkout的配置可以查询git官方文档[link]<p></p><h2 id="网页工具">网页工具</h2><p>可以通过<a href="https://minhaskamal.github.io/DownGit/#/home">这个网站</a>下载某个项目的部分文件，只需要把对应文件或文件夹的链接复制到下载框中即可。注意这里用的是网页链接，而不是仓库的url <img src="/img/Git-Clone-Part-of-Repository-3.png" alt="网页截图"></p><h2 id="用svn配置只下载部分文件">用SVN配置只下载部分文件</h2><p>找到对应的文件夹，然后修改链接中的/tree/master/为/trunk/。例如例子中的Kalman文件夹链接为 https://github.com/FrankMartinem/Algorithm/tree/master/Kalman 修改为 https://github.com/FrankMartinem/Algorithm/trunks/Kalman 然后运行svn checkout命令 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">svn checkout https://github.com/FrankMartinem/Algorithm/trunk/Kalman<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 然后就可以下载对应文件夹的文件了。如果下载的文件夹不在master分支上，那么需要找到对应的分支，然后修改为/branches/branchname/。例如在develop分支上，则修改为/branches/develop/。<p></p><h2 id="总结">总结</h2><p>以上就是三种下载单个文件的方法，笔者尝试了前两种方法，均能实现需求。由于笔者没有装svn，所以没有尝试svn方法，但是有很多人也尝试过这种方法，应该是可行的。 总体来看，三种方法各有优劣，git checkout方法配置麻烦，但是能同时下载多个不同位置的文件或者文件夹，只需要写好配置文件。但是如果项目文件很复杂，层级很多，而且git记录很多的话，那么第一步初始化就要花很长的时间。 网页版的话更方便快捷，但是对于复杂的需求，可能需要复制很多次网页链接然后下载很多次，会比较麻烦。而且这种方法依赖于浏览器和图形界面。 svn方法可能和网页版的缺点类似，也是只能针对单一文件夹设置。当然也可能svn还有其他的功能，这里不过多赘述。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEVELOPMENT" scheme="http://frankmartinem.github.io/categories/DEVELOPMENT/"/>
    
    
    <category term="git" scheme="http://frankmartinem.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Linux unzip file from Windows</title>
    <link href="http://frankmartinem.github.io/2021/07/29/Linux-unzip-file-from-Windows/"/>
    <id>http://frankmartinem.github.io/2021/07/29/Linux-unzip-file-from-Windows/</id>
    <published>2021-07-29T18:51:07.000Z</published>
    <updated>2022-01-18T09:48:38.528Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="linux下解压window中的zip文件的乱码问题">Linux下解压window中的zip文件的乱码问题</h1><p>在windows系统下压缩的zip文件，使用的编码格式是gbk，而Linux默认是utf-8的，所以解码后如果有中文，会出现乱码。解决方法就是利用unzip命令解压。然后设置好编码参数，解压命令如下。 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">unzip -O cp936 file-name.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 解压文件会显示在当前目录下，如果想解压到指定文件夹，可以自行修改参数。<p></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEVELOPMENT" scheme="http://frankmartinem.github.io/categories/DEVELOPMENT/"/>
    
    
    <category term="linux" scheme="http://frankmartinem.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Latex+Vscode Configuration in Ubuntu</title>
    <link href="http://frankmartinem.github.io/2021/07/28/Latex-Vscode-Configuration-in-Ubuntu/"/>
    <id>http://frankmartinem.github.io/2021/07/28/Latex-Vscode-Configuration-in-Ubuntu/</id>
    <published>2021-07-28T08:44:38.000Z</published>
    <updated>2022-01-18T09:47:37.976Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ubuntu下latex安装以及vscode配置">Ubuntu下Latex安装以及vscode配置</h1><p>本文主要介绍Ubuntu系统下Latex环境的配置，使用的软件有 - TexLive2021 - vscode</p><h2 id="安装texlive">安装TexLive</h2><ol type="1"><li><p>下载TexLive安装包，下载地址为：[TexLive][https://www.tug.org/texlive/acquire-netinstall.html]。官网下载可能会比较慢，可以选择国内镜像网站：[TexLive Tsinghua Mirror][https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/]。</p></li><li><p>解压对应的iso文件，Ubuntu18.04可以直接右键解压。也可以用mount命令挂载iso文件然后提取文件，这样会比较麻烦，这里也不多赘述。解压完后，文件内容如图1所示。 <img src="/img/Latex-Vscode-Configuration-in-Ubuntu-1.png"></p></li><li><p>cd到对应的文件目录，然后运行如下命令，可以在命令行中安装，如图2所示。根据提示，配置好需要安装的组件，然后回车安装即可。 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo ./install-tl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <img src="/img/Latex-Vscode-Configuration-in-Ubuntu-2.png"><p></p></li><li><p>也可以用图形界面安装。先cd到对应文件目录，然后运行如下命令，就会显示和windows类似的图形界面了，如图3所示。 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo ./install-tl -gui -repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <img src="/img/Latex-Vscode-Configuration-in-Ubuntu-3.png"> 建议对于大多数用户，安装完整版的TexLive，省得以后发现缺少依赖不能编译，会很麻烦。TexLive的安装较慢，耐心等待。安装完成后，在terminal中输入xelatex，latexmk等命令，如果显示command not found。那么需要添加TexLive到环境变量，添加的方法如下。如果显示有当前命令，那么直接到vscode配置部分。<p></p></li></ol><h2 id="添加环境变量">添加环境变量</h2><p>找到对应的终端配置文件，如果是zsh则是.zshrc，如果是bash则是.bashrc。都在用户目录下。打开终端，输入如下命令。如果是其他shell则改成其他shell的配置文件，用不习惯vim可以用gedit。 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo vim ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 在配置文件中加入如下内容： <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">export PATH="$PATH:/usr/local/texlive/2021/bin/x86_64-linux/"export MANPATH="$MANPATH:/usr/local/texlive/2018/texmf-dist/doc/man"export INFOPATH="$INFOPATH/usr/local/texlive/2018/texmf-dist/doc/info"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre> 配置环境变量需要注意的内容，可以参考另外一篇 [blog][https://frankmartinem.github.io/2021/06/01/Linux-Environment-Variable/] 配置完成后，打开终端输入xelatex，latexmk等命令，检查环境变量是否配置成功。<p></p><h2 id="vscode配置">vscode配置</h2><p>TexLive安装完成后，vscode的配置就比较简单了。主要包括以下步骤。 1. 安装Latex Workshop插件，在vscode的扩展商店里，直接搜索就能找到。 2. 配置Latex编译的json文件。安装好插件以后，需要配置好编译的一些参数，这里提供我自己的配置文件 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">"latex-workshop.latex.tools":[    {    "name": "latexmk",    "command": "latexmk",    "args": [        "-synctex=1",        "-interaction=nonstopmode",        "-file-line-error",        "-pdf",        "%DOC%"    ]    },    {    "name": "xelatex",    "command": "xelatex",    "args": [        "-synctex=1",        "-interaction=nonstopmode",        "-file-line-error",        "%DOC%"    ]    },    {    "name": "pdflatex",    "command": "pdflatex",    "args": [        "-synctex=1",        "-interaction=nonstopmode",        "-file-line-error",        "%DOC%"    ]    },    {    "name": "bibtex",    "command": "bibtex",    "args": [        "%DOCFILE%"    ]    }],"latex-workshop.latex.recipes":[    {    "name": "latexmk",    "tools": [        "latexmk"    ]    },    {    "name": "xelatex -&gt; bibtex -&gt; xelatex*2",    "tools": [        "xelatex",        "bibtex",        "xelatex",        "xelatex"    ]    },    {    "name": "xelatex",    "tools": [        "xelatex"    ]    },    {    "name": "pdflatex -&gt; bibtex -&gt; pdflatex*2",    "tools": [        "pdflatex",        "bibtex",        "pdflatex",        "pdflatex"    ]    },    {        "name":"pdflatex",        "tools": [            "pdflatex"        ]    }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 主要的配置是latex的编译命令以及流程化的一些编译过程。latex.tools里面是常用的编译命令，例如latexmk，pdflatex，xelatex等，需要配置好这些命令的参数。latex.recipe主要是一些编译链，用于文档的编译。然后latex插件中显示的编译选项就是对应于latex.recipe的内容。例如这里比较常用的latexmk直接编译，以及涉及到参考文献引用的pdflatex-&gt;bibtex-&gt;pdflatex-&gt;pdflatex的编译链等。 以上就是Ubuntu下Latex环境配置以及vscode环境配置的主要内容了。配置完成后基本就能用了，还有一些其他的细节后续可以根据自己的习惯去添加。例如安装sumatra PDF插件，安装Latex英文词库语法插件等。最后，个人建议用vscode写latex时，很有必要开启自动换行，不然手动回车换行会很麻烦，而且后期改起来也很麻烦。打开的方式就是在vscode的设置中，找到Word Wrap选项，然后改成wordwrapcolumn。<p></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEVELOPMENT" scheme="http://frankmartinem.github.io/categories/DEVELOPMENT/"/>
    
    
    <category term="linux" scheme="http://frankmartinem.github.io/tags/linux/"/>
    
    <category term="latex" scheme="http://frankmartinem.github.io/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>ZJU VPN connection in Linux</title>
    <link href="http://frankmartinem.github.io/2021/07/28/ZJU-VPN-connection-in-Linux/"/>
    <id>http://frankmartinem.github.io/2021/07/28/ZJU-VPN-connection-in-Linux/</id>
    <published>2021-07-28T08:04:24.000Z</published>
    <updated>2022-01-18T09:55:09.900Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="linux系统下连接校园网zju-vpn">Linux系统下连接校园网（ZJU VPN）</h1><h2 id="软件安装">软件安装</h2><p>在Linux系统下连接校园网和Windows稍有不同，需要使用命令行连接。但是基本过程是一样的，以下为主要步骤： 1. 设置系统的IP地址。如果有固定分配的IP，那么就在网络选项理设置IP地址。如图1所示。 <img src="/img/ZJU-VPN-connection-in-Linux-1.png"> 2. 安装xl2tpd。这是VPN设置必要的软件包，由于校园网是以VPN的形式搭建的，所以需要这个安装包，访问校内和校外网址。安装方法为如下命令： </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo apt-get install xl2tpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 3. 安装zjunet。这是zju vpn连接的命令行工具，是依赖xl2tpd的，所以需要先进行步骤2。软件的网址是：[zjunet][https://github.com/QSCTech/zjunet]。找到最新的release版本，然后下载安装包。以Ubuntu为例，下载*.deb文件，先cd到安装包所在路径，然后用如下命令安装： <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo dpkg -i *.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 4. 完成上述步骤后，终端输入zjunet可以查看对应的参数以及帮助文档，如图2所示。 <img src="/img/ZJU-VPN-connection-in-Linux-2.png"> 以上就完成了对应软件安装，下面是zjunet的基本使用教程<p></p><h2 id="zjunet使用">zjunet使用</h2><p>zjunet的使用参数有很多，对大部分人来说，主要的应用场景应该还是连接校园网。所以下面只介绍如何连接校园网。主要有以下几步。 1. 输入你的账号和密码。先输入账号密码，软件会自动记录，下次登录时可以省略这步。配置命令如下。 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">zjunet user add<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> 然后终端会提示你输入账号和密码，如图3所示。 <img src="/img/ZJU-VPN-connection-in-Linux-3.png"><p></p><ol start="2" type="1"><li><p>输入账号和密码后，就可以直接连接校园网了，连接命令如下。终端可能会显示retrying，这个属于正常现象，不是配置的问题。 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">zjunet vpn -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p></li><li><p>连接成功如图4所示。 <img src="/img/ZJU-VPN-connection-in-Linux-4.png"></p></li><li><p>如果想断开连接，可以输入如下命令，即可断开连接，断开连接后的提示如图5所示。 </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">zjunet vpn -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <img src="/img/ZJU-VPN-connection-in-Linux-5.png"><p></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEVELOPMENT" scheme="http://frankmartinem.github.io/categories/DEVELOPMENT/"/>
    
    
    <category term="linux" scheme="http://frankmartinem.github.io/tags/linux/"/>
    
    <category term="vpn" scheme="http://frankmartinem.github.io/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>Qt Deploy</title>
    <link href="http://frankmartinem.github.io/2021/07/06/Qt-Deploy/"/>
    <id>http://frankmartinem.github.io/2021/07/06/Qt-Deploy/</id>
    <published>2021-07-06T09:48:57.000Z</published>
    <updated>2022-01-18T09:51:09.113Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="发布带运行环境的qt执行文件">发布带运行环境的Qt执行文件</h1><p>在VS中生成release版本的exe文件后，文件会依赖于使用的lib以及dll文件等。这样换一个运行环境后，可能会无法运行当前的文件。例如基于Qt的exe文件，会依赖于Qt的lib和dll。Qt提供了此问题的解决办法。</p><h2 id="解决方法">解决方法</h2><ol type="1"><li>打开Qt提供的cmd窗口</li><li>cd到release版本的exe所在的位置</li><li>运行 windeployqt file_name.exe</li><li>当前文件夹下的文件就是对应exe文件所需的运行环境 上述操作生成的dll文件以及运行环境，能保证exe文件在没有安装qt环境的PC上运行。此方法只适用于windows系统（运行指令的意思就是win deploy qt的意思）。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEVELOPMENT" scheme="http://frankmartinem.github.io/categories/DEVELOPMENT/"/>
    
    
    <category term="qt" scheme="http://frankmartinem.github.io/tags/qt/"/>
    
  </entry>
  
  <entry>
    <title>Difference in Debug and Release</title>
    <link href="http://frankmartinem.github.io/2021/07/06/Difference-in-Debug-and-Release/"/>
    <id>http://frankmartinem.github.io/2021/07/06/Difference-in-Debug-and-Release/</id>
    <published>2021-07-06T08:43:13.000Z</published>
    <updated>2022-01-18T09:44:53.149Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vs中debug和release的区别">VS中Debug和Release的区别</h1><h2 id="问题1">问题1</h2><h3 id="问题描述">问题描述</h3><p>在搭建EMG信号处理系统时，我需要读取一个txt文件。在debug时能正常读取。在release版本下却不能获取其中的信息。后来发现问题在于我使用了assert语句。我的读取代码如下： </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Config</span><span class="token double-colon punctuation">::</span><span class="token function">gen_data_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>QFile <span class="token function">f</span><span class="token punctuation">(</span>select_dataset_path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">atEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>QString l <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">else</span>data_list<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">simplified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>data_num <span class="token operator">=</span> data_list<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>trial_num <span class="token operator">=</span> data_num <span class="token operator">*</span> blk_num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> ### 解决办法 在release条件下，data_num始终是0。因为assert语句被忽略掉了，所以txt文件一直都没有被读取。将代码改成如下形式，release版本下也能正常读取了。 <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Config</span><span class="token double-colon punctuation">::</span><span class="token function">gen_data_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>QFile <span class="token function">f</span><span class="token punctuation">(</span>select_dataset_path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> isOpen <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>ReadOnly <span class="token operator">|</span> QIODevice<span class="token double-colon punctuation">::</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">assert</span><span class="token punctuation">(</span>isOpen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">atEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>QString l <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">else</span>data_list<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">simplified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>data_num <span class="token operator">=</span> data_list<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>trial_num <span class="token operator">=</span> data_num <span class="token operator">*</span> blk_num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 这样isOpen的值取决于文件是否打开。所以f.open(QIODevice::ReadOnly | QIODevice::Text)这部分的内容一定会被执行的。 在VS中，也可以在属性中打开编译调试代码开关，这样就会编译assert函数了。<p></p><h3 id="原因探究">原因探究</h3><p>查阅相关资料后，我发现assert语句在windows下，利用VC的编译器时，会被忽略掉而不执行。这取决于release和debug时的编译器优化方式。在linux条件下，使用gcc编译时则不会忽略assert语句。其他深入的编译原理相关的原因就不再接着探究了。 总的来说，不管使用何种编译器，代码规范化是很重要的。assert语句不应该被用来检测文件读取，以及输入是否合法等问题。也不能把赋值操作等语句放在其中。总之，检查代码的时候，把assert语句去掉，如果代码的正常逻辑没有问题。那么代码就是正常的。assert应该是用来检测参数的合法性以及参数值的大小等涉及代码完备性和安全性的问题。</p><h2 id="问题2">问题2</h2><h3 id="问题描述-1">问题描述</h3><p>在搭建EMG信号处理系统时，需要通过state参数来判断是否暂停函数中的for循环。在debug条件下，暂停和恢复都能正常运行。暂停条件下停止实验也能正常运行，但是在release条件下，暂停后就没法恢复正常运行了，而且暂停后要么会在下一个trial时停止，要么在后面恢复时，没有响应。代码块如下： </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> exp_c<span class="token punctuation">.</span>blk_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> exp_c<span class="token punctuation">.</span>data_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>th_record_state <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>main_th_stop<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">stop_experiment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>th_record_state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> state_num<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 需要实现的功能是，在th_record_state为1（record state）时，实验正常进行；在th_record_state为2（pause state）时，实验暂停；在th_record_state为0时，main_th_stop为true，实验结束。 ### 解决办法 由于release版本下，VS的优化器认为while循环中的内容对外部代码没有影响，且while循环会占用很多计算量。所以在release版本下，while循环中的代码会被忽略掉。所以在while循环中加入延时，减少因为暂停导致的循环次数。这样优化器会重新加入while循环的内容。（这部分涉及到VS中的编译优化的问题，没有深究原因）。修改后的代码如下： <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> exp_c<span class="token punctuation">.</span>blk_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> exp_c<span class="token punctuation">.</span>data_num<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>th_record_state <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>main_th_stop<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">stop_experiment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>th_record_state <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> state_num<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> 尽管这样会损失一些反应时间，但是实验系统对反应时间的要求也不高，而且Sleep函数的时间可以根据实验所需的反应时间修改。这种解决方案也可以接受。<p></p><h3 id="原因探究-1">原因探究</h3><p>主要的原因还是debug和release版本下，VS的优化方法不一样。优化的参数可以在项目属性中调整。但是release版本的代码对稳定性的要求会更高，类似于数组越界，指针赋值等问题，在debug时可能没问题。但是release时就会出现问题。此时一定要检查代码的规范性问题，以及代码中的一些合理性问题，例如本文中出现的assert语句中加入文件读取语句，while循环不加延时导致大量无效循环等问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="LANGUAGE" scheme="http://frankmartinem.github.io/categories/LANGUAGE/"/>
    
    
    <category term="compile" scheme="http://frankmartinem.github.io/tags/compile/"/>
    
    <category term="cpp" scheme="http://frankmartinem.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>powershell commands-tree</title>
    <link href="http://frankmartinem.github.io/2021/06/10/powershell-commands-tree/"/>
    <id>http://frankmartinem.github.io/2021/06/10/powershell-commands-tree/</id>
    <published>2021-06-10T21:16:00.000Z</published>
    <updated>2022-01-18T09:50:16.076Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="powershell命令tree">powershell命令：tree</h1><p>显示文件夹中的文件结构，并生成txt文件或md文件。 用法如下： </p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">tree <span class="token namespace">[drive:]</span><span class="token namespace">[path]</span> <span class="token punctuation">[</span><span class="token operator">/</span>F<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">/</span>A<span class="token punctuation">]</span> &gt;<span class="token namespace">[PRN]</span><span class="token punctuation">[</span><span class="token operator">/</span>F<span class="token punctuation">]</span>: 显示目录下的文件名<span class="token punctuation">[</span><span class="token operator">/</span>A<span class="token punctuation">]</span>: 使用ASCII码字符<span class="token namespace">[PRN]</span>: 存储生成的文件结构的txt或md文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="DEVELOPMENT" scheme="http://frankmartinem.github.io/categories/DEVELOPMENT/"/>
    
    
    <category term="powershell" scheme="http://frankmartinem.github.io/tags/powershell/"/>
    
  </entry>
  
</feed>
