{"meta":{"title":"Frank Wan's Blog","subtitle":"世界上只有一种真正的英雄主义，就是认清生活的真相后并依然热爱它","description":"Stay Hungry, Stay Foolish","author":"Zijun Wan","url":"http://zijunwan.github.io"},"pages":[{"title":"about","date":"2018-09-30T09:25:30.000Z","updated":"2023-03-10T04:09:29.169Z","comments":true,"path":"about/index.html","permalink":"http://zijunwan.github.io/about/index.html","excerpt":"","text":"姓名：Wan Zijun 地址：浙江大学玉泉校区 邮箱：wanzijun95@qq.com"},{"title":"书单","date":"2023-03-10T04:10:56.184Z","updated":"2023-03-10T04:10:56.184Z","comments":false,"path":"books/index.html","permalink":"http://zijunwan.github.io/books/index.html","excerpt":"","text":"douban 豆瓣书单 douban: user: 122349831 # 豆瓣用户名 start: 1 # 从哪一条记录开始 count: 100 # 获取豆瓣书单数据条数"},{"title":"categories","date":"2018-09-30T10:23:38.000Z","updated":"2023-03-10T04:11:39.551Z","comments":true,"path":"categories/index.html","permalink":"http://zijunwan.github.io/categories/index.html","excerpt":"","text":""},{"title":"404","date":"2021-12-20T03:57:38.000Z","updated":"2023-03-10T04:09:32.552Z","comments":true,"path":"404/index.html","permalink":"http://zijunwan.github.io/404/index.html","excerpt":"","text":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","updated":"2021-12-20T10:56:28.855Z","comments":true,"path":"contact/index.html","permalink":"http://zijunwan.github.io/contact/index.html","excerpt":"","text":""},{"title":"friends","date":"2021-12-20T03:56:51.000Z","updated":"2021-12-20T10:57:22.224Z","comments":true,"path":"friends/index.html","permalink":"http://zijunwan.github.io/friends/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2023-02-11T04:46:17.450Z","updated":"2021-07-24T16:19:36.650Z","comments":true,"path":"links/index.html","permalink":"http://zijunwan.github.io/links/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","updated":"2021-12-20T10:52:34.885Z","comments":true,"path":"tags/index.html","permalink":"http://zijunwan.github.io/tags/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2023-02-11T04:45:32.782Z","updated":"2021-07-24T16:19:36.689Z","comments":false,"path":"repository/index.html","permalink":"http://zijunwan.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"WORLD Vocoder","slug":"WORLD-Vocoder","date":"2022-01-25T02:22:32.000Z","updated":"2023-03-10T03:24:15.307Z","comments":true,"path":"2022/01/25/WORLD-Vocoder/","link":"","permalink":"http://zijunwan.github.io/2022/01/25/WORLD-Vocoder/","excerpt":"","text":"Introduction WORLD是由Yamanashi大学的MORISE团队开发的一款语音合成软件，可以用来合成高质量的语音信号。 Method WORLD的合成主要包括以下几个步骤： - 计算基础频率F0，使用DIO算法 - 计算频谱的包络线， 使用CheapTrick算法 - 计算非周期信号参数Aperiodicity parameters，使用PLATINUM算法 References [1] Morise M, Yokomori F, Ozawa K. WORLD: a vocoder-based high-quality speech synthesis system for real-time applications[J]. IEICE TRANSACTIONS on Information and Systems, 2016, 99(7): 1877-1884. [2] M. Morise, H. Kawahara, and H. Katayose, “Fast and reliable f0 estimation method based on the period extraction of vocal fold vibration of singing voice and speech,” in Proc. AES 35th International Conference, CD-ROM Proceedings, 2009. [3] M. Morise, H. Kawahara, and T. Nishiura, “Rapid f0 estimation for high-snr speech based on fundamental component extraction,” IEICE Trans. Inf. &amp; Syst. (Japanese Edition), vol.J93-D, no.2, pp.109–117, 2010. [4] M. Morise, “Cheaptrick, a spectral envelope estimator for high-quality speech synthesis,” Speech Communication, vol.67, pp.1–7, 2015. [5] M. Morise, “Platinum: A method to extract excitation signals for voice synthesis system,” Acoust. Sci. &amp; Tech., vol.33, no.2, pp.123–125, 2012. [6] M. Morise, “Error evaluation of an f0-adaptive spectral envelope estimator in robustness against the additive noise and f0 error,” IEICE Trans. on Information Systems, vol.E98-D, no.7, pp.1405–1408, 2015. [8] 开源的语音合成系统WORLD介绍以及使用方法 [9] WORLD - a high-quality speech analysis, manipulation and synthesis system","categories":[{"name":"SIGNAL PROCESSING","slug":"SIGNAL-PROCESSING","permalink":"http://zijunwan.github.io/categories/SIGNAL-PROCESSING/"}],"tags":[{"name":"Audio","slug":"Audio","permalink":"http://zijunwan.github.io/tags/Audio/"}],"keywords":[{"name":"SIGNAL PROCESSING","slug":"SIGNAL-PROCESSING","permalink":"http://zijunwan.github.io/categories/SIGNAL-PROCESSING/"}]},{"title":"Mel Frequency Cepstral Coefficients","slug":"Mel-Frequency-Cepstral-CoefficientsMel-Frequency-Cepstral-Coefficients","date":"2022-01-18T02:27:41.000Z","updated":"2023-03-10T03:21:42.323Z","comments":true,"path":"2022/01/18/Mel-Frequency-Cepstral-CoefficientsMel-Frequency-Cepstral-Coefficients/","link":"","permalink":"http://zijunwan.github.io/2022/01/18/Mel-Frequency-Cepstral-CoefficientsMel-Frequency-Cepstral-Coefficients/","excerpt":"","text":"Introduction 在语音信号处理中，我们需要得到不同声音的不同特征表示。这样我们可以对声音进行区分。对于传统的信号处理，我们常用频域分布，功率谱，能量等特征来描述一个一维信号。语音信号也不例外，作为一种常用的一维信号，其处理仍旧会使用传统的方法。但是也有些许不同。于是，我们就需要用 MFCC，即梅尔倒频谱系数来计算语音信号的特征。 与传统的信号处理不同的是，语音信号的处理需要考虑到人耳听到声音的感觉和传统方式处理后的数据的对应关系。例如：人的耳蜗会根据声音的不同在不同的地方共振；也不会太区分两个很细微的频率，特别是高频的声音；而且，人类对于声音大小的感知不是线性的，所以我们会计算对数。 Method MFCC的计算主要包括以下几个步骤： 预加重(Pre-Emphasis) \\[ y(t) = x(t) - \\alpha x(t-1) \\] 其中，\\(y(t)\\)是预加重后的数据, \\(x(t)\\)是原始信号, \\(\\alpha\\)是预加重系数，一般介于0.97-1之间。其目的主要是提升高频部分，使信号的频谱更加平坦。同时，也避免后面计算傅立叶变换时出现数值问题。比较预加重前后的音频信号，如图1所示。 分帧(Frame) 也就是分bin，需要将原始信号拼接起来形成帧。每一帧的时间长度一般是20ms-30ms左右。然后也会采取滑动窗的形式，避免帧和帧之间差距过大。目前常用处理方式是，控制帧的范围在20ms-30ms之间，每一帧的重叠部分在50%左右。分帧后的音频信号如图2所示。可以看出和预加重的信号基本一致。 加窗 (Window) 对每一帧数据进行划窗处理，用增加数据之间的连续性。对于非周期信号，由于傅立叶变换只能计算有限长度的信号，如果不加滑动窗，会产生频域泄漏。所以，可以用窗函数对信号进行截断，来减少这种频域的泄漏问题。这里我们使用汉宁窗。 \\[ w(n) = (1-a) - a \\times cos(\\frac{2 \\pi n}{N-1})\\] 其中，\\(N\\)是汉宁窗的长度，\\(a\\)是汉宁窗的系数，一般取0.46。 所以，加窗后的信号为： \\[s(n) = x(n) \\times w(n)\\] 其中，\\(s(n)\\)是加窗后的信号，\\(x(n)\\)是原始信号。 傅立叶变换(FFT) 对信号进行FFT，计算当前信号的频谱特性。 \\[ X(k) = \\sum_{n=0}^{N-1} x(n) \\times e^{-2\\pi i k / N}, 0 \\leq k \\leq N-1 \\] 其中，\\(X(k)\\)是频谱，\\(x(n)\\)是加窗后的语音信号，\\(N\\)是FFT点数。上述音频信号的功率谱如图3所示: 三角带通滤波器 将计算后的频谱用三角滤波器滤波。这组三角滤波器是与Mel尺度匹配的。一般来讲滤波器的个数在40个。梅尔频谱会更加关注低频的信号，而对高频的信号用低分辨率的感知。Mel三角滤波器组如图4所示。 Mel频谱和真实频谱之间的换算关系如下: \\[ m = 2595 log_{10}(1+\\frac{f}{700})\\] \\[ f = 700(10^{m/2595}-1)\\] 其中，\\(m\\)是Mel频谱，\\(f\\)是真实频谱。 三角滤波器组的频率响应可以如下表示： \\[ H_m(k) = \\begin{cases} 0 &amp; {k\\leq f(m-1)} \\newline \\frac{2(k-f(m-1))}{(f(m+1)-f(m-1))(f(m)-f(m-1))} &amp; {f(m-1) \\leq k \\leq f(m)} \\newline \\frac{2(f(m+1)-k)}{(f(m+1)-f(m-1))(f(m)-f(m-1))} &amp; {f(m) \\leq k \\leq f(m+1)} \\newline 0 &amp; {k \\geq f(m+1)} \\end{cases} \\] 其中，\\(H_m(k)\\)是三角滤波器组的频率响应。\\(f(m)\\)表示第\\(m\\)个三角滤波器的中心频率。 离散余弦变换(DCT) 将上述滤波器组的系数进行离散余弦变换： \\[ C(n) = \\sum_{m=0}^{n-1}s(m)cos(\\frac{\\pi n(m-0.5)}{M}), n = 1, 2, ..., L \\] DCT在这里的主要作用，是去除滤波器组中系数的高度相关性，将滤波器组系数的能量聚集起来，去除那些能量小的系数。经过计算以后，得到的就是MFCC系数了。 以上就是MFCC的计算过程。对于语音问题，我们一般在计算DCT得到MFCC后，会再用正弦函数进行处理 (sinusoidal liftering)。主要是来淡化高阶MFCC系数的影响。因为在语音识别时，更高频的信号大多数是噪声。最后，我们一般也会进行归一化处理。得到的结果如图5所示。 Code import numpy as np import soundfile as sf from scipy.fftpack import dct import matplotlib.pyplot as plt # pre-emphasis alpha = 0.97 f = sf.SoundFile('bjkjg.wav') d, sr = f.read(), f.samplerate pd = np.append(d[0], d[1:] - alpha * d[:-1]) # framing frame_size, frame_stride = 0.025, 0.01 frame_length = int(round(frame_size*sr)) frame_step = int(round(frame_stride*sr)) signal_length = len(pd) num_frames = int(np.ceil(float(np.abs(signal_length-frame_length))/frame_step)) pad_signal_length = num_frames * frame_step + frame_length pad_signal = np.append(pd, np.zeros((pad_signal_length - signal_length))) indices = np.tile(np.arange(0,frame_length),(num_frames,1))+np.tile(np.arange(0,num_frames*frame_step,frame_step), (frame_length, 1)).T frames = pad_signal[np.mat(indices).astype(np.int32, copy=False)] # windowing frames *= np.hamming(frame_length) # fft NFFT = 512 mag_frames = np.absolute(np.fft.rfft(frames, NFFT)) # Magnitude of the FFT pow_frames = (1.0 / NFFT) * (mag_frames ** 2) # filter banks nfilt=40 low_freq_mel = 0 high_freq_mel = (2595 * np.log10(1 + (sr / 2) / 700)) # Convert Hz to Mel mel_points = np.linspace(low_freq_mel, high_freq_mel, nfilt + 2) # Equally spaced in Mel scale hz_points = (700 * (10**(mel_points / 2595) - 1)) # Convert Mel to Hz bin = np.floor((NFFT + 1) * hz_points / sr) fbank = np.zeros((nfilt, int(np.floor(NFFT / 2 + 1)))) for m in range(1, nfilt + 1): f_m_minus = int(bin[m - 1]) # left f_m = int(bin[m]) # center f_m_plus = int(bin[m + 1]) # right for k in range(f_m_minus, f_m): fbank[m - 1, k] = (k - bin[m - 1]) / (bin[m] - bin[m - 1]) for k in range(f_m, f_m_plus): fbank[m - 1, k] = (bin[m + 1] - k) / (bin[m + 1] - bin[m]) filter_banks = np.dot(pow_frames, fbank.T) filter_banks = np.where(filter_banks == 0, np.finfo(float).eps, filter_banks) # Numerical Stability filter_banks = 20 * np.log10(filter_banks) # dB # dct num_ceps = 24 mfcc = dct(filter_banks, type=2, axis=1, norm='ortho')[:, 1 : (num_ceps + 1)] (nframes, ncoeff) = mfcc.shape # liftering n = np.arange(ncoeff) cep_lifter =22 lift = 1 + (cep_lifter / 2) * np.sin(np.pi * n / cep_lifter) mfcc *= lift # normalize filter_banks -= (np.mean(filter_banks, axis=0) + 1e-8) mfcc -= (np.mean(mfcc, axis=0) + 1e-8) References Speech Processing for Machine Learning: Filter banks, Mel-Frequency Cepstral Coefficients (MFCCs) and What's In-Between 语音特征参数MFCC提取过程详解 语音识别第4讲：语音特征参数MFCC 详解离散余弦变换（DCT） Mohamed A. Deep Neural Network Acoustic Models for ASR[D]. University of Toronto, 2014. Muda L, Begam M, Elamvazuthi I. Voice recognition algorithms using mel frequency cepstral coefficient (MFCC) and dynamic time warping (DTW) techniques[J]. arXiv preprint arXiv:1003.4083, 2010. Zheng F, Zhang G, Song Z. Comparison of different implementations of MFCC[J]. Journal of Computer science and Technology, 2001, 16(6): 582-589.","categories":[{"name":"SIGNAL PROCESSING","slug":"SIGNAL-PROCESSING","permalink":"http://zijunwan.github.io/categories/SIGNAL-PROCESSING/"}],"tags":[{"name":"Audio","slug":"Audio","permalink":"http://zijunwan.github.io/tags/Audio/"}],"keywords":[{"name":"SIGNAL PROCESSING","slug":"SIGNAL-PROCESSING","permalink":"http://zijunwan.github.io/categories/SIGNAL-PROCESSING/"}]},{"title":"本地打开远程tensorboard","slug":"tensorboard-ssh","date":"2022-01-13T08:30:51.000Z","updated":"2023-03-10T03:25:18.672Z","comments":true,"path":"2022/01/13/tensorboard-ssh/","link":"","permalink":"http://zijunwan.github.io/2022/01/13/tensorboard-ssh/","excerpt":"","text":"问题 在实验过程中，代码一般运行在服务器，但是连接服务器的图形界面一般比较麻烦，大部分情况下还是ssh连接。所以我们需要能在本地查看服务器上的代码运行进度。 解决办法 如何解决这个问题呢？我们在服务器上运行tensorboard，设置好对应的端口，然后用ssh将本地的端口映射到服务器上tensorboard的端口。然后在本地浏览器打开localhost的对应端口，就能查看tensorboard的进度了。整个过程其实是一个映射的过程。 代码 在服务器上运行tensorboard tensorboard --logdir=&lt;log path&gt; --port=&lt;server port&gt; --host=&lt;server ip&gt; 其中log path是tensorboard的日志路径，server port是tensorboard的端口，注意不要和本地其他端口冲突。server ip是服务器的IP地址。 在本地运行ssh连接服务器 ssh -L &lt;local port&gt;:&lt;server ip&gt;:6006 username@&lt;server ip&gt; 其中local port是本地的映射端口，server ip是服务器的ip地址，username是ssh的用户名。 在本地浏览器打开本地端口 打开浏览器，输入网址：localhost:，就能查看tensorboard的进度了。 结果 tensorboard in local","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"http://zijunwan.github.io/tags/ssh/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"self-attention","slug":"self-attention","date":"2022-01-10T14:45:47.000Z","updated":"2022-01-18T09:52:18.831Z","comments":true,"path":"2022/01/10/self-attention/","link":"","permalink":"http://zijunwan.github.io/2022/01/10/self-attention/","excerpt":"","text":"self attention","categories":[{"name":"DEEP LEARNING","slug":"DEEP-LEARNING","permalink":"http://zijunwan.github.io/categories/DEEP-LEARNING/"}],"tags":[{"name":"attention","slug":"attention","permalink":"http://zijunwan.github.io/tags/attention/"}],"keywords":[{"name":"DEEP LEARNING","slug":"DEEP-LEARNING","permalink":"http://zijunwan.github.io/categories/DEEP-LEARNING/"}]},{"title":"tmux常用命令","slug":"tmux-command","date":"2022-01-07T02:24:53.000Z","updated":"2023-03-10T03:26:24.929Z","comments":true,"path":"2022/01/07/tmux-command/","link":"","permalink":"http://zijunwan.github.io/2022/01/07/tmux-command/","excerpt":"","text":"使用ssh连接服务器时，如果本地长时间没有操作，ssh会断开连接。这样会带来很多麻烦。首先是需要重新输入密码再连接，当然如果服务器有public key，这个过程可以省略。然后是ssh断开前的终端会自动关闭，这样如果是在跑代码的话，程序就中断了。为了解决这个问题，可以使用tmux，一个终端的多窗口管理工具。 tmux的作用很简单，就是新建终端，这个终端会一直保持在后台，即是ssh连接断开，终端也会继续运行。所以也就避免了上述的第二个问题。对于第一个问题，tmux在网络正常的情况下，是一直连接的。并不会出现ssh这种长时间不操作就断开的情况。tmux的主要用法如下： 创建终端，这一步要在服务器上进行，在哪儿进行就是在哪台机器上新建终端，所以一般都是在服务器 tmux new -s &lt;name&gt; 这里的name是终端的名字，如果不设置的话，直接输入tmux就可以了，那么终端的名字默认是0，1，2以此类推。但是后期查找起来会很麻烦，如果终端很多的话。所以还是建议写个名字 连接到已有的tmux终端 tmux attach -t &lt;name&gt; 这里的name就是上面的name。如果没设置的话，就是0，1，2这些数字编号。如果忘记了终端的名字，那么可以用 tmux ls 上述命令可以查询已有的tmux终端名字 分离终端，如果需要关闭某一个终端，可以使用这一命令。值得注意的是，此命令只会关闭终端显示，但是仍旧会在后台运行 tmux detach tmux detach -P -s &lt;session name&gt; 这一命令可以带参数，可以不带参数。如果不带参数，在哪个tmux终端窗口运行就detach哪个；如果带参数\"s“，可以指定要detach的窗口。如果带参数\"P\"，那么会断开对应窗口的ssh连接，但是终端还是在后台运行。 切换终端 tmux switch -t &lt;name&gt; 将当前终端切换到另外一个终端 退出终端 tmux kill-session -t &lt;name&gt; 这一命令会退出当前的终端，其中运行的任务也会自动终止","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"http://zijunwan.github.io/tags/ssh/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"Conditional Generative Adversarial Nets","slug":"Conditional-Generative-Adversarial-Nets","date":"2021-12-25T13:46:40.000Z","updated":"2023-03-10T03:41:45.864Z","comments":true,"path":"2021/12/25/Conditional-Generative-Adversarial-Nets/","link":"","permalink":"http://zijunwan.github.io/2021/12/25/Conditional-Generative-Adversarial-Nets/","excerpt":"","text":"Introduction 本文主要介绍GAN的一种改进形式，Conditional GAN。原始的GAN更多的关注于数据的生成，但是由于输入的随机性，所以GAN生成数据具有很强的随机性。数据生成很”自由“。对于目前的应用来说，我们更希望是生成的数据能是受控制的，是和输入有关的。于是就有了CGAN。 Methods CGAN的基本框架如图-1所示。主要的改进就是在生成器和判别器的输入中都加入了label。生成器中加入label，可以生成对应的数据，即生成的数据分布和label相关\\(G(z|y)\\)。判别器中加入label，可以判断数据是否和label相关。这样经过CGAN的损失函数迭代，可以使得生成的数据越来越靠近label对应的数据分布。 图-1: CGAN基本框架 CGAN的损失函数为： \\[\\underset{G}{min} \\underset{D}{max} V(D, G) = E_{x \\sim p_{data}(x)}[log(D(x|y))]+E_{z \\sim p_{z}}[log(1-D(G(z|y)))]\\] 其中，\\(x\\)是真实数据，\\(y\\)是label，\\(z\\)是用于生成数据的噪声信号。 Applications CGAN的应用很广泛，可以用来生成特定风格的图像，或者特定的文字等内容。例如在pix2pix中[2]，我们用CGAN根据图像轮廓去进行颜色填充，根据地图轮廓去生成真实图像等。根据黑夜的图像生成白天的图像等。图2展示了根据轮廓进行颜色填充。 图2: pix2pix生成图像 参考文献[2]总结了CGAN生成图像时的一些常用的技巧，例如loss function的定义，patchGAN的应用等。文章中提到了，现有的生成模型的损失函数主要集中于计算像素点直接的平均距离，这样很容易忽视局部的信息，导致生成图像模糊。所以文章的改进如下： - 在CGAN的损失函数中加入L1范数，关注全局的相似度；而CGAN本身的损失函数则关注于图像的轮廓等局部信息 GAN的损失函数： \\[L_{GAN}(G, D) = \\underset{G}{min}\\underset{D}{max}E_y[log(D(y))]+E_{x, z}[log(1-D(G(x, z)))]\\] L1范数： \\[L_{L1}(G) = E_{(x,y,z)} ||(y - G(x, z))||^1 \\] 损失函数： \\[G^* = L_{GAN}(G, D) + \\lambda * L_{L1}(G)\\] 加入dropout，BatchNorm层 生成器的CNN网络使用U-Net结构，并采用skip连接 使用Markovian判别器(PatchGAN)，更加关注于图像局部信息 Experiment 基于CGAN的原理，利用MNIST数据集，输入为图像的标签和噪声，生成图像，判断生成图像的标签和真实图像标签是否相同。 代码链接：CGAN代码 原始图像如图3(a)所示，生成图像如图3(b)所示。 图3: (a) 原始图像；(b) 解码图像 可以看出，生成图像的数字和原始数据是相似的。 Summary CGAN相较于GAN，加入了label，使得数据生成更加可控，生成的数据和label更加相关。 References Conditional Generative Adversarial Nets Image-to-Image Translation with Conditional Adversarial Networks","categories":[{"name":"DEEP LEARNING","slug":"DEEP-LEARNING","permalink":"http://zijunwan.github.io/categories/DEEP-LEARNING/"}],"tags":[{"name":"cgan","slug":"cgan","permalink":"http://zijunwan.github.io/tags/cgan/"}],"keywords":[{"name":"DEEP LEARNING","slug":"DEEP-LEARNING","permalink":"http://zijunwan.github.io/categories/DEEP-LEARNING/"}]},{"title":"Generative Adversarial Nets","slug":"Generative-Adversarial-Nets","date":"2021-12-23T10:40:39.000Z","updated":"2023-03-10T03:46:29.313Z","comments":true,"path":"2021/12/23/Generative-Adversarial-Nets/","link":"","permalink":"http://zijunwan.github.io/2021/12/23/Generative-Adversarial-Nets/","excerpt":"","text":"Introduction 本文将介绍对抗生成网络（GAN）的基础框架，以及主要的推导过程。 首先是GAN的基本概念：GAN的主要思想是博弈。利用生成器\\(G\\)和判别器\\(D\\)的博弈。来使得生成器能够准确生成出类似于原始数据分布的样本；同时在博弈过程中，使得判别器能更加准确的区分出原始数据和生成数据。 Method 假设有一组样本\\(data\\)，其数据分布为\\(p_{data}\\)。生成器\\(G\\)根据一组噪声数据\\(z\\)，其分布为\\(p_z\\)，生成一组数据\\(G(z)\\)，判别器为\\(D\\)。其中生成器和判别器的参数分别为\\(\\theta_{g}\\)和\\(\\theta_{d}\\)。 那么，生成器的目标是使得生成的数据\\(G(z)\\)更接近真实数据分布\\(p_{data}\\)，也就是说\\(log[D(G(z))]\\)要尽可能大。然后对于判别器\\(D\\)，其对于真实数据的判别要更准确，即\\(log[D(x)]\\)要尽可能大。所以，根据上述问题可以构造以下条件： \\[\\underset{G}{min} \\underset{D}{max} E_{x \\sim p_{data}(x)}[log(D(x))] + E_{z \\sim p_{z}[log(1-D(G(z)))]}\\] Goodfellow的论文中给出了下面的图，可以解释GAN的迭代过程。蓝线是判别器输出的数据分布；绿线是生成器输出的数据分布；黑线是真实的数据分布；\\(z\\)是噪声数据，通过生成器映射到数据\\(x\\)。从而计算生成器输出的分布。在一开始，生成器\\(G\\)的输出分布和真实的分布差距很大，判别器可以很轻易的区分生成数据和真实数据；但是也仅限于中间的部分，对于两者重合的部分，判别器的区分效果并不好；然后在(b)图中，对判别器参数进行迭代优化（后面会证明，判别器的参数存在最优解），使得判别器的输出结果更加稳定平滑也更加准确；(c)图中迭代了生成器的参数，使得生成的数据更接近真实数据。如此循环迭代后，最理想的状态即是达到(d)图，判别器无法区分生成数据和真实数据，生成数据的分布和真实数据相等。 图-1: GAN的迭代过程 所以GAN的训练过程如图-2所示： 图-2: GAN算法 GAN的上述迭代过程能找到使得\\(G(z)\\)的分布\\(p_g\\)更接近\\(p_{data}\\)的最优解，必须满足以下条件： 1. 上述最优化问题有唯一解（全局最优解）\\(G^{*}\\)，且该解满足\\(p_g=p_{data}\\) 2. 上述最优化问题最终收敛（条件-1的必要条件） 要证明上述条件成立，可以先证明在生成器\\(G\\)固定时，判别器\\(D\\)的参数具有最优解（根据算法-1的迭代过程来推导）。证明如下： \\[V(G, D) = \\int_{x}p_{data}(d)log(D(x))dx + \\int_{z}p_z(z)log(1-D(G(z)))dz\\] \\[=\\int_{x}p_{data}(d)log(D(x)) + p_{g}p_g(x)log(1-D(x)) dx\\] （主要是第二项，这里并不是换元转换，因为\\(G\\)并不一定可逆，这里是基于Radon-Nikodym定理。具体证明方法这里不深究） 要使得\\(V(G, D)\\)取得最大值，\\(D(x)\\)就需要使函数\\(f(D) = p_{data}log(D) + p_{g}log(1-D)\\)取最大值，根据拉格朗日中值定理，可以计算得到：取最大值的\\(D(x)\\)应该满足\\(D^{*}(x) = \\frac{p_{data}}{p_{data}+p_{g}}\\)。 所以，生成器\\(G\\)固定时，判别器\\(D\\)的参数具有最优解，该最优解满足\\(D(x) = \\frac{p_{data}}{p_{data}+p_{g}}\\) 然后，需要证明当且仅当\\(p_g=p_{data}\\)时，训练函数\\(C(G) = \\underset{D}{max}V(G, D)\\)取得全局最小值。证明如下： 当\\(p_g=p_{data}\\)，根据上述推导可知\\(D(x) = \\frac{1}{2}\\)。带入到\\(V(G, D)\\)中，可得： \\[V(G, D^*) = \\int_{x}p_{data}(x)log(\\frac{1}{2})+p_{g}(x)log(1-\\frac{1}{2})dx\\] \\[ = -log(2)\\int_{x}p_{data}(x)dx-log(2)\\int_{x}p_{g}(x)dx\\] \\[ = -log(2) - log(2) = -log(4)\\] （概率的积分是1） 所以当\\(p_g=p_{data}\\)时，训练函数的值是\\(-log(4)\\)，下面需要证明这是最小值，且只有\\(p_g=p_{data}\\)时条件才成立。于是我们假设\\(p_g \\neq p_{data}\\)。但是判别器\\(D\\)仍旧取得最优解。所以有： \\[V(G, D^*) = \\int_{x}p_{data}(x)log(\\frac{p_{data}}{p_{data}+p_{g}}) + p_{g}(x)log(\\frac{p_{g}}{p_{data}+p_{g}})dx\\] \\[= \\int_{x}(log(2)-log(2))p_{data}(x) + p_{data}(x)log(\\frac{p_{data}}{p_{data}+p_{g}}) + \\] \\[ \\int_{x}(log(2)-log(2))p_{g}(x) + p_{g}(x)log(\\frac{p_{g}}{p_{data}+p_{g}})dx\\] \\[= -log(2)\\int_{x}p_{g}(x)+p_{data}(x)dx + \\int_{x}p_{data}(x)(log(2)+log(\\frac{p_{data}}{p_{data}+p_{g}}))dx + \\] \\[ \\int_{x}p_{g}(log(2) + log(\\frac{p_{g}}{p_{data}+p_{g}})dx\\] \\[= -log(4) + \\int_{x}p_{data}(x)log(\\frac{p_{data}}{(p_{data}+p_{g})/2})) + \\int_{x}p_{g}(x)log(\\frac{p_{g}}{(p_{data}//2+p_{g})/2})\\] 根据KL散度的定义，可以得到： \\[V(G, D^*) = -log(4) + KL(p_{data}|\\frac{p_{data}+p_{g}}{2}) + KL(p_{g}|\\frac{p_{data}+p_{g}}{2})\\] 由于\\(KL(p|q) \\geq 0\\)，所以\\(V(G, D)\\)当且仅当\\(p_{data}=p_{g}\\)时取得最小值\\(-log(4)\\)。 (\\(KL(p_{data}|\\frac{p_{data}+p_{g}}{2}) + KL(p_{g}|\\frac{p_{data}+p_{g}}{2}) = JSD(p_{data}|p_{g}\\)，论文中是根据Jensen–Shannon散度来计算的。结论是一致的) 最后是关于\\(C(G) = V(G, D)\\)的收敛的证明。论文中的证明主要是根据导数的特性，以及分布\\(p_{g}\\)属于凸函数的特点来证明的。 Experiment 基于GAN的原理，本文使用MNIST数据集进行实验。判断GAN是否能生成和MNIST数据集很像的图像。 代码链接 原始的MNIST数据如图3(a)所示。生成的数据如图3(b)所示。 图3：(a) MNIST原始数据；(b) GAN生成的数据 Summary 以上就是最基础的GAN的概念以及推导过程。尽管已经证明了GAN的推导过程的可行性。但是在实际应用中，要使得GAN收敛并得到好的效果，还需要一些训练技巧。 - 首先是GAN的收敛问题，虽然已经证明GAN的迭代函数是收敛的，但是收敛的前提是生成器函数为凸函数。且由于神经网络迭代的特性。我们无法确定神经网络是通过何种策略调整，来达到纳什均衡的（也就是GAN有很好的表现的状态，论文中的观点）。 - 然后是\\(p_{g}\\)没办法显示表示，因为是生成器的输出。然后是\\(p_{data}\\)未知，虽然可以根据这一分布计算\\(D\\)的最优解，但是并没有办法求出具体数值。 References [1] Goodfellow et al., 2014. Generative Adversarial Nets.","categories":[{"name":"DEEPLEARNING","slug":"DEEPLEARNING","permalink":"http://zijunwan.github.io/categories/DEEPLEARNING/"}],"tags":[{"name":"gan","slug":"gan","permalink":"http://zijunwan.github.io/tags/gan/"}],"keywords":[{"name":"DEEPLEARNING","slug":"DEEPLEARNING","permalink":"http://zijunwan.github.io/categories/DEEPLEARNING/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-12-19T23:04:45.831Z","updated":"2021-12-20T15:39:48.253Z","comments":true,"path":"2021/12/20/hello-world/","link":"","permalink":"http://zijunwan.github.io/2021/12/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]},{"title":"服务器非管理员配置python环境","slug":"Config-Python-for-Unroot-Users","date":"2021-12-14T02:07:05.000Z","updated":"2023-03-10T04:22:32.684Z","comments":true,"path":"2021/12/14/Config-Python-for-Unroot-Users/","link":"","permalink":"http://zijunwan.github.io/2021/12/14/Config-Python-for-Unroot-Users/","excerpt":"","text":"Introduction Linux服务器配置python环境时，默认的安装位置是\"/usr/bin\"。但没有管理员权限时是无法写文件到当前路径的。而且多人共用一个服务器时，大家的python环境各不相同，每个人也会配置自己的python环境。所以在home文件夹安装配置自己的python环境是更合适的。一下是在没有root权限的情况下配置python的方法。 Method 下载python source code到home/your name 文件夹： wget https://www.python.org/ftp/python/3.10.1/Python-3.10.1.tgz 这里以python-3.10.1为例，可以从python官网下载对应版本的源代码 解压文件 cd download dir tar -xzvf Python-3.10.1.tgz 下载好以后，如果直接安装，会有以下的问题：首先是openssl，用于软件的安全通信，避免被窃听的一个toolkit。一般是系统级的app；然后是zlib，这个组件用于数据压缩和解压，如果需要使用科学计算的库，那么zlib是必须的；最后是libffi，相当于C的编译器，同样也是用于科学计算。上述组件均可以通过管理员sudo，yum安装。但是如果没有管理员权限，那么需要自行安装。 安装openssl 下载并解压openssl wget https://www.openssl.org/source/openssl-3.0.0.tar.gz tar -xzvf openssl-3.0.0.tar.gz 编译并安装 cd openssl-3.0.0.tar.gz ./config --prefix=/home/your name/openssl_dir make -j48 make install 安装zlib 下载，解压，编译并安装 wget http://www.zlib.net/zlib-1.2.11.tar.gz tar -xzvf zlib-1.2.11.tar.gz cd zlib-1.2.11.tar.gz ./configure --prefix=/home/your name/zlib_dir make -j48 make install 安装libffi 下载，解压，编译并安装 wget https://github.com/libffi/libffi/releases/download/v3.4.2/libffi-3.4.2.tar.gz tar -xzvf libffi-3.4.2.tar.gz cd libffi-3.4.2.tar.gz ./configure --prefix=/home/your name/libffi make -j48 make install 将上述安装文件的路径写入环境变量 export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/home/your name/libffi_dir/lib/pkgconfig export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/home/your_name/openssl_dir/lib:/home/your name/zlib_dir/lib:/home/your_name/libffi_dir/lib export PKG_CONFIG_PATH=/home/jacob/libffi/lib/pkgconfig export CFLAGS=-I/home/your name/libffi_dir/include export LDFLAGS=-L/home/your name/libffi_dir/lib 进入python的setup文件，修改部分编译信息 cd python_path/Modules/ vim Setup.dist # 取消下面的注释 SSL=/home/your name/openssl_dir _ssl _ssl.c -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl -L$(SSL)/lib -lssl -lcrypto zlib zlibmodule.c -I/home/your name/zlib_dir/include -L/home/your name/zlib_dir/lib -lz 编译python代码，这里需要gcc编译器，一般Linux发行版都自带gcc编译器，如果没有安装，请联系管理员。同时，编译过程需要配置特定的参数 cd Python-3.10.1 ./configure LDFLAGS=\"-L/home/your name/libffi_dir/lib64 -Wl,--rpath=/home/your name/libffi_dir/lib64\" CFLAGS=\"-I/home/your name/libffi_dir/include\" PKG_CONFIG_PATH=\"${libffi}/lib/pkgconfig\" --prefix=/home/your name/your path --with-openssl=/home/your name/openssl_dir make # make -j48 这里不推荐，因为会编译所有的test file，耗时较长，机器快的话也要20min-30min左右 make install Summary 以上就是非管理员账户在home文件夹安装自己的python环境的方法。这种方法能安装简易的python环境，但是如果需要很复杂的计算，例如scikt，pytorch，tensorflow等强烈依赖底层C链接库的模块，那么上述方法或许可行。因为整个过程无非是把库文件的源代码安装到了home文件夹里，然后修改环境变量配置。但是如果真的是很复杂的编译和依赖，不建议使用上述方法。上述方法主要参考以下博客和文章： CSDN Stackoverflow Github Pages 那么，针对Introduction提出的问题，每个人都需要自定义自己的python环境，是否有更好的解决方法呢。答案是有的，那就是由管理员安装python到usr目录。然后每个人可以在home文件夹新建自己的虚拟环境。只需要使用pip3命令即可： python3 -m pip install --user virtualenv python3 -m venv /home/your name/python_dir","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://zijunwan.github.io/tags/linux/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"pytorch note","slug":"pytorch-note","date":"2021-12-13T03:11:16.000Z","updated":"2022-01-18T09:51:00.615Z","comments":true,"path":"2021/12/13/pytorch-note/","link":"","permalink":"http://zijunwan.github.io/2021/12/13/pytorch-note/","excerpt":"","text":"Pytorch 笔记 Pytorch的中，tensor切片时不需要写全所有的维度 1234567891011121314import torchx = torch.rand(2, 3, 4)&gt;&gt;&gt; xtensor([[[0.6691, 0.2031, 0.4246, 0.7182], [0.7533, 0.5432, 0.8189, 0.2309], [0.7979, 0.6861, 0.9331, 0.6360]], [[0.3718, 0.9343, 0.3975, 0.8068], [0.3031, 0.7124, 0.5972, 0.7359], [0.6043, 0.1800, 0.4715, 0.8611]]])&gt;&gt;&gt; x[0:1, :]tensor([[[0.6691, 0.2031, 0.4246, 0.7182], [0.7533, 0.5432, 0.8189, 0.2309], [0.7979, 0.6861, 0.9331, 0.6360]]]) torch.cat 可以拼接list 123456789101112131415161718192021import torch&gt;&gt;&gt; x = torch.rand(2, 3)&gt;&gt;&gt; xtensor([[0.6009, 0.1935, 0.3899], [0.8208, 0.1878, 0.9621]])&gt;&gt;&gt; y = [x for i in range(4)]&gt;&gt;&gt; y[tensor([[0.6009, 0.1935, 0.3899], [0.8208, 0.1878, 0.9621]]), tensor([[0.6009, 0.1935, 0.3899], [0.8208, 0.1878, 0.9621]]), tensor([[0.6009, 0.1935, 0.3899], [0.8208, 0.1878, 0.9621]]), tensor([[0.6009, 0.1935, 0.3899], [0.8208, 0.1878, 0.9621]])]&gt;&gt;&gt; torch.cat(y, 0)tensor([[0.6009, 0.1935, 0.3899], [0.8208, 0.1878, 0.9621], [0.6009, 0.1935, 0.3899], [0.8208, 0.1878, 0.9621], [0.6009, 0.1935, 0.3899], [0.8208, 0.1878, 0.9621], [0.6009, 0.1935, 0.3899], [0.8208, 0.1878, 0.9621]]) torch.contiguous()函数用于确保tensor的底层是按照行优先排序的。Tensor底层实现是使用一块连续内存的1维数组，Tensor在元信息里保存了多维数组的形状，在访问元素时，通过多维度索引转化成1维数组相对于数组起始位置的偏移量即可找到对应的数据。某些Tensor操作（如transpose、permute、narrow、expand）与原Tensor是共享内存中的数据，不会改变底层数组的存储，但原来在语义上相邻、内存里也相邻的元素在执行这样的操作后，在语义上相邻，但在内存不相邻，即不连续了（is not contiguous）。","categories":[{"name":"DEEP LEARNING","slug":"DEEP-LEARNING","permalink":"http://zijunwan.github.io/categories/DEEP-LEARNING/"}],"tags":[{"name":"notes","slug":"notes","permalink":"http://zijunwan.github.io/tags/notes/"},{"name":"pytorch","slug":"pytorch","permalink":"http://zijunwan.github.io/tags/pytorch/"}],"keywords":[{"name":"DEEP LEARNING","slug":"DEEP-LEARNING","permalink":"http://zijunwan.github.io/categories/DEEP-LEARNING/"}]},{"title":"极大似然估计 - Log Likelihood","slug":"Log-Likelihood","date":"2021-12-05T12:23:33.000Z","updated":"2023-03-10T03:56:12.054Z","comments":true,"path":"2021/12/05/Log-Likelihood/","link":"","permalink":"http://zijunwan.github.io/2021/12/05/Log-Likelihood/","excerpt":"","text":"Introduction 极大似然估计是传统机器学习以及深度学习中都常用的计算方法。其主要的目的，是根据现有的数据分布，估计采样得到现有数据的更大的数据集的分布。 Method 定义 假设从一个很大的数据集中采集到有\\(m\\)个数据的数据集\\(X=\\{x_1,...,x_m\\}\\)。所以原始的很大的数据集的分布为\\(P_{data}(x)\\)。根据数据计算得到的分布为\\(P_{model}(x; \\theta)\\)。其中\\(\\theta\\)是模型的参数。所以： \\[\\theta= \\underset{\\theta}{\\operatorname{arg max}}P_{model}(x;\\theta)\\] \\[\\theta= \\underset{\\theta}{\\operatorname{arg max}}\\prod_{i=1}^{m}P_{model}(x_i;\\theta)\\] 这里直接计算概率连乘很不方便，而且容易出现极小值。由于log函数的单调性，且能处理连乘问题，所以这里取对数。 \\[\\theta = \\underset{\\theta}{\\operatorname{arg max}}\\sum_{i=1}^{m}log(P_{model}(x_i; \\theta))\\] 求和符号的计算仍旧存在些许不方便，所以这里缩放\\(m\\)倍，且数据从当前数据集中提取，当前数据集的经验分布设为\\(\\hat{P_{data}}\\)。 所以： \\[\\theta=\\underset{\\theta}{\\operatorname{arg max}} E_{x \\sim \\hat{P_{data}}}(P_{model}(x;\\theta))\\] 以上就是极大似然函数。 KL散度视角 根据问题的描述，我们需要求解数据的分布\\(P_{model}(x; \\theta)\\)，使得其最接近数据集的分布\\(\\hat{P_{data}}(x)\\)。从KL散度出发，即需要最小化两者的KL散度（注意：KL散度计算是有顺序的，即\\(D_{KL}(P||Q) \\neq D_{KL}(Q||P)\\)。 KL散度计算如下： \\[D_{KL}(P_{data}(x)|| P_{model}(x; \\theta))=E_{x\\sim\\hat P_{data}}[log(\\hat P_{data}(x)) - log(P_{model}(x; \\theta))]\\] 第一项和模型参数无关，所以计算时只需要最小化第二项，即： \\[\\theta = \\underset{\\theta}{\\operatorname{arg max}} -log(P_{model}(x; \\theta))\\] 这一步骤和定义中的最大化是相同的。","categories":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}],"tags":[{"name":"probability","slug":"probability","permalink":"http://zijunwan.github.io/tags/probability/"}],"keywords":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}]},{"title":"基于SVD算法的无迹卡尔曼滤波","slug":"SVD-UKF","date":"2021-09-24T11:52:00.000Z","updated":"2023-03-10T04:18:15.538Z","comments":true,"path":"2021/09/24/SVD-UKF/","link":"","permalink":"http://zijunwan.github.io/2021/09/24/SVD-UKF/","excerpt":"","text":"问题 无迹卡尔曼滤波（Unscented Kalman Filter）是卡尔曼滤波（Kalman Filter）的改进版，其中取消了卡尔曼滤波中对于观测变量的一阶线性隐马尔可夫链的约束，也取消了观测变量和测量变量之间的线性关系。取而代之的是任意的函数，然后用无迹变换（Unscented Transform）来估计观测变量变化时以及观测变量和测量变量变化时的概率分布变化。但是，无迹卡尔曼滤波在计算时需要计算协方差矩阵的Cholesky分解，这一步需要保证协方差矩阵是正定矩阵。在真实计算中，由于观测变量可能有多维，且互相之间可能互相独立，导致协方差矩阵不一定是正定矩阵。也有可能由于参数的选择不当，导致协方差矩阵不满足正定矩阵的要求。从而导致计算无法进行。这也是无迹卡尔曼滤波中需要注意的地方。 解决方法 对于协方差矩阵非正定的问题，目前有两种解决办法。一种是选择合适的参数。但是这种方法比较依赖经验，需要多次测试调整。第二种方法就是基于SVD的无迹卡尔曼滤波。这种方法利用奇异值分解（SVD）方法，将协方差矩阵分解为对角矩阵和另外两个矩阵。由于协方差矩阵中，对角线上的值一定是正的，因为对角线上的值就是不同维度的观测变量的方差。所以对角矩阵的值肯定是正的，所以可以开根号。协方差矩阵分解的计算方法如下： \\[ [S, V, D] = SVD(P) \\] \\[ P_{est} = S * \\sqrt{V} \\] 用上述步骤，替换无迹卡尔曼滤波计算中的Cholesky分解，即得到基于SVD的无迹卡尔曼滤波。因为协方差矩阵是对称的，所以\\(S\\)的转置矩阵是\\(D\\)，计算时只考虑一边即可。其余的计算步骤参考 Unscented Kalman Filter 参考文献 An Improved Unscented Kalman Filter Algorithm for Radar Azimuth Mutation","categories":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}],"tags":[{"name":"ukf","slug":"ukf","permalink":"http://zijunwan.github.io/tags/ukf/"}],"keywords":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}]},{"title":"SSH Download and Upload","slug":"SSH-Download-and-Upload","date":"2021-08-13T01:34:41.000Z","updated":"2023-03-10T03:59:10.323Z","comments":true,"path":"2021/08/13/SSH-Download-and-Upload/","link":"","permalink":"http://zijunwan.github.io/2021/08/13/SSH-Download-and-Upload/","excerpt":"","text":"SSH 从服务器下载文件或者上传文件以及文件夹 从服务器下载文件 scp yourname@IP address:/path to your file/ /local path/ scp frank@10.212.48.177:~/Downloads/test.py ~/Downloads 从服务器下载文件夹 scp -r yourname@IP address:/path to your folder/ /local path/ scp -r frank@10.212.48.177:~/Downloads/test ~/Downloads 上传文件到服务器 scp /path to your file/ yourname@IP address:/remote path/ scp ~/Downloads/test.py frank@10.212.48.177:~/Downloads 上传文件夹到服务器 scp -r /path to your folder/ yourname@IP address:/remote path/ scp -r ~/Downloads/test frank@10.212.48.177:~/Downloads 注意，服务器的IP地址后的冒号和文件地址，文件夹地址之间没有空格","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"http://zijunwan.github.io/tags/ssh/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"git下载仓库的单个文件","slug":"Git-Clone-Part-of-Repository","date":"2021-08-12T02:36:05.000Z","updated":"2023-03-10T03:51:55.979Z","comments":true,"path":"2021/08/12/Git-Clone-Part-of-Repository/","link":"","permalink":"http://zijunwan.github.io/2021/08/12/Git-Clone-Part-of-Repository/","excerpt":"","text":"问题描述 如果一个仓库的文件很多，但是又只需要其中的一部分，这时下载全部的文件会很浪费时间，毕竟github的下载速度也慢。所以就需要想办法只下载部分文件。下面介绍三种方法。 git指令下载 git目前已经支持通过修改配置文件来下载单个文件，这里以我自己的仓库为例，项目仓库结构如图所示。我需要下载Algorithm项目下的Kalman整个文件夹，以及Wiener-Filter文件夹下的wienerfilter.py文件。那么可以通过如下方法实现。 项目截图 首先新建一个文件夹，然后clone整个仓库的结构以及git的改动文件。 mkdir file cd file git init git remote add -f origin &lt;url of target repository&gt; 然后配置git config文件，将sparsecheckout设置为true，即允许从仓库中下载部分的文件 git config core.sparseCheckout true 将你需要下载的文件添加到config文件中，对于例子中的要求，配置如下 echo \"Kalman\" &gt;&gt; .git/info/sparse-checkout echo \"Wiener-Filter/wienerfilter.py\" &gt;&gt; .git/info/sparse-checkout 然后直接拉取项目，然后会根据配置文件拉取对应的文件 git pull origin master 命令行截图如图所示 命令行截图 可以看出，最终只下载了需要的代码。详细的git sparse checkout的配置可以查询git官方文档[link] 网页工具 可以通过这个网站下载某个项目的部分文件，只需要把对应文件或文件夹的链接复制到下载框中即可。注意这里用的是网页链接，而不是仓库的url 网页截图 用SVN配置只下载部分文件 找到对应的文件夹，然后修改链接中的/tree/master/为/trunk/。例如例子中的Kalman文件夹链接为 https://github.com/FrankMartinem/Algorithm/tree/master/Kalman 修改为 https://github.com/FrankMartinem/Algorithm/trunks/Kalman 然后运行svn checkout命令 svn checkout https://github.com/FrankMartinem/Algorithm/trunk/Kalman 然后就可以下载对应文件夹的文件了。如果下载的文件夹不在master分支上，那么需要找到对应的分支，然后修改为/branches/branchname/。例如在develop分支上，则修改为/branches/develop/。 总结 以上就是三种下载单个文件的方法，笔者尝试了前两种方法，均能实现需求。由于笔者没有装svn，所以没有尝试svn方法，但是有很多人也尝试过这种方法，应该是可行的。 总体来看，三种方法各有优劣，git checkout方法配置麻烦，但是能同时下载多个不同位置的文件或者文件夹，只需要写好配置文件。但是如果项目文件很复杂，层级很多，而且git记录很多的话，那么第一步初始化就要花很长的时间。 网页版的话更方便快捷，但是对于复杂的需求，可能需要复制很多次网页链接然后下载很多次，会比较麻烦。而且这种方法依赖于浏览器和图形界面。 svn方法可能和网页版的缺点类似，也是只能针对单一文件夹设置。当然也可能svn还有其他的功能，这里不过多赘述。","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"git","slug":"git","permalink":"http://zijunwan.github.io/tags/git/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"Linux下解压window中的zip文件的乱码问题","slug":"Linux-unzip-file-from-Windows","date":"2021-07-29T12:51:07.000Z","updated":"2023-03-10T03:55:48.253Z","comments":true,"path":"2021/07/29/Linux-unzip-file-from-Windows/","link":"","permalink":"http://zijunwan.github.io/2021/07/29/Linux-unzip-file-from-Windows/","excerpt":"","text":"在windows系统下压缩的zip文件，使用的编码格式是gbk，而Linux默认是utf-8的，所以解码后如果有中文，会出现乱码。解决方法就是利用unzip命令解压。然后设置好编码参数，解压命令如下。 unzip -O cp936 file-name.zip 解压文件会显示在当前目录下，如果想解压到指定文件夹，可以自行修改参数。","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://zijunwan.github.io/tags/linux/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"Latex+Vscode Configuration in Ubuntu","slug":"Latex-Vscode-Configuration-in-Ubuntu","date":"2021-07-28T02:44:38.000Z","updated":"2023-03-10T03:55:03.217Z","comments":true,"path":"2021/07/28/Latex-Vscode-Configuration-in-Ubuntu/","link":"","permalink":"http://zijunwan.github.io/2021/07/28/Latex-Vscode-Configuration-in-Ubuntu/","excerpt":"","text":"Ubuntu下Latex安装以及vscode配置 本文主要介绍Ubuntu系统下Latex环境的配置，使用的软件有 - TexLive2021 - vscode 安装TexLive 下载TexLive安装包，下载地址为：[TexLive][https://www.tug.org/texlive/acquire-netinstall.html]。官网下载可能会比较慢，可以选择国内镜像网站：[TexLive Tsinghua Mirror][https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/]。 解压对应的iso文件，Ubuntu18.04可以直接右键解压。也可以用mount命令挂载iso文件然后提取文件，这样会比较麻烦，这里也不多赘述。解压完后，文件内容如图1所示。 cd到对应的文件目录，然后运行如下命令，可以在命令行中安装，如图2所示。根据提示，配置好需要安装的组件，然后回车安装即可。 sudo ./install-tl 也可以用图形界面安装。先cd到对应文件目录，然后运行如下命令，就会显示和windows类似的图形界面了，如图3所示。 sudo ./install-tl -gui -repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/ 建议对于大多数用户，安装完整版的TexLive，省得以后发现缺少依赖不能编译，会很麻烦。TexLive的安装较慢，耐心等待。安装完成后，在terminal中输入xelatex，latexmk等命令，如果显示command not found。那么需要添加TexLive到环境变量，添加的方法如下。如果显示有当前命令，那么直接到vscode配置部分。 添加环境变量 找到对应的终端配置文件，如果是zsh则是.zshrc，如果是bash则是.bashrc。都在用户目录下。打开终端，输入如下命令。如果是其他shell则改成其他shell的配置文件，用不习惯vim可以用gedit。 sudo vim ~/.zshrc 在配置文件中加入如下内容： export PATH=\"$PATH:/usr/local/texlive/2021/bin/x86_64-linux/\" export MANPATH=\"$MANPATH:/usr/local/texlive/2018/texmf-dist/doc/man\" export INFOPATH=\"$INFOPATH/usr/local/texlive/2018/texmf-dist/doc/info\" 配置环境变量需要注意的内容，可以参考另外一篇 [blog][https://frankmartinem.github.io/2021/06/01/Linux-Environment-Variable/] 配置完成后，打开终端输入xelatex，latexmk等命令，检查环境变量是否配置成功。 vscode配置 TexLive安装完成后，vscode的配置就比较简单了。主要包括以下步骤。 1. 安装Latex Workshop插件，在vscode的扩展商店里，直接搜索就能找到。 配置Latex编译的json文件。安装好插件以后，需要配置好编译的一些参数，这里提供我自己的配置文件 \"latex-workshop.latex.tools\": [ { \"name\": \"latexmk\", \"command\": \"latexmk\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"-pdf\", \"%DOC%\" ] }, { \"name\": \"xelatex\", \"command\": \"xelatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ] }, { \"name\": \"pdflatex\", \"command\": \"pdflatex\", \"args\": [ \"-synctex=1\", \"-interaction=nonstopmode\", \"-file-line-error\", \"%DOC%\" ] }, { \"name\": \"bibtex\", \"command\": \"bibtex\", \"args\": [ \"%DOCFILE%\" ] } ], \"latex-workshop.latex.recipes\": [ { \"name\": \"latexmk\", \"tools\": [ \"latexmk\" ] }, { \"name\": \"xelatex -&gt; bibtex -&gt; xelatex*2\", \"tools\": [ \"xelatex\", \"bibtex\", \"xelatex\", \"xelatex\" ] }, { \"name\": \"xelatex\", \"tools\": [ \"xelatex\" ] }, { \"name\": \"pdflatex -&gt; bibtex -&gt; pdflatex*2\", \"tools\": [ \"pdflatex\", \"bibtex\", \"pdflatex\", \"pdflatex\" ] }, { \"name\":\"pdflatex\", \"tools\": [ \"pdflatex\" ] } ] 主要的配置是latex的编译命令以及流程化的一些编译过程。latex.tools里面是常用的编译命令，例如latexmk，pdflatex，xelatex等，需要配置好这些命令的参数。latex.recipe主要是一些编译链，用于文档的编译。然后latex插件中显示的编译选项就是对应于latex.recipe的内容。例如这里比较常用的latexmk直接编译，以及涉及到参考文献引用的pdflatex-&gt;bibtex-&gt;pdflatex-&gt;pdflatex的编译链等。 以上就是Ubuntu下Latex环境配置以及vscode环境配置的主要内容了。配置完成后基本就能用了，还有一些其他的细节后续可以根据自己的习惯去添加。例如安装sumatra PDF插件，安装Latex英文词库语法插件等。最后，个人建议用vscode写latex时，很有必要开启自动换行，不然手动回车换行会很麻烦，而且后期改起来也很麻烦。打开的方式就是在vscode的设置中，找到Word Wrap选项，然后改成wordwrapcolumn。","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://zijunwan.github.io/tags/linux/"},{"name":"latex","slug":"latex","permalink":"http://zijunwan.github.io/tags/latex/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"Linux系统下连接校园网（ZJU VPN）","slug":"ZJU-VPN-connection-in-Linux","date":"2021-07-28T02:04:24.000Z","updated":"2023-03-10T04:03:51.714Z","comments":true,"path":"2021/07/28/ZJU-VPN-connection-in-Linux/","link":"","permalink":"http://zijunwan.github.io/2021/07/28/ZJU-VPN-connection-in-Linux/","excerpt":"","text":"软件安装 在Linux系统下连接校园网和Windows稍有不同，需要使用命令行连接。但是基本过程是一样的，以下为主要步骤： 1. 设置系统的IP地址。如果有固定分配的IP，那么就在网络选项理设置IP地址。如图1所示。 安装xl2tpd。这是VPN设置必要的软件包，由于校园网是以VPN的形式搭建的，所以需要这个安装包，访问校内和校外网址。安装方法为如下命令： sudo apt-get install xl2tpd 安装zjunet。这是zju vpn连接的命令行工具，是依赖xl2tpd的，所以需要先进行步骤2。软件的网址是：[zjunet][https://github.com/QSCTech/zjunet]。找到最新的release版本，然后下载安装包。以Ubuntu为例，下载*.deb文件，先cd到安装包所在路径，然后用如下命令安装： sudo dpkg -i *.deb 完成上述步骤后，终端输入zjunet可以查看对应的参数以及帮助文档，如图2所示。 以上就完成了对应软件安装，下面是zjunet的基本使用教程 zjunet使用 zjunet的使用参数有很多，对大部分人来说，主要的应用场景应该还是连接校园网。所以下面只介绍如何连接校园网。主要有以下几步。 输入你的账号和密码。先输入账号密码，软件会自动记录，下次登录时可以省略这步。配置命令如下。 zjunet user add 然后终端会提示你输入账号和密码，如图3所示。 输入账号和密码后，就可以直接连接校园网了，连接命令如下。终端可能会显示retrying，这个属于正常现象，不是配置的问题。 zjunet vpn -c 连接成功如图4所示。 如果想断开连接，可以输入如下命令，即可断开连接，断开连接后的提示如图5所示。 zjunet vpn -d","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://zijunwan.github.io/tags/linux/"},{"name":"vpn","slug":"vpn","permalink":"http://zijunwan.github.io/tags/vpn/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"Qt Deploy","slug":"Qt-Deploy","date":"2021-07-06T03:48:57.000Z","updated":"2022-01-18T09:51:09.113Z","comments":true,"path":"2021/07/06/Qt-Deploy/","link":"","permalink":"http://zijunwan.github.io/2021/07/06/Qt-Deploy/","excerpt":"","text":"发布带运行环境的Qt执行文件 在VS中生成release版本的exe文件后，文件会依赖于使用的lib以及dll文件等。这样换一个运行环境后，可能会无法运行当前的文件。例如基于Qt的exe文件，会依赖于Qt的lib和dll。Qt提供了此问题的解决办法。 解决方法 打开Qt提供的cmd窗口 cd到release版本的exe所在的位置 运行 windeployqt file_name.exe 当前文件夹下的文件就是对应exe文件所需的运行环境 上述操作生成的dll文件以及运行环境，能保证exe文件在没有安装qt环境的PC上运行。此方法只适用于windows系统（运行指令的意思就是win deploy qt的意思）。","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"qt","slug":"qt","permalink":"http://zijunwan.github.io/tags/qt/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"VS中Debug和Release的区别","slug":"Difference-in-Debug-and-Release","date":"2021-07-06T02:43:13.000Z","updated":"2023-03-10T03:50:39.148Z","comments":true,"path":"2021/07/06/Difference-in-Debug-and-Release/","link":"","permalink":"http://zijunwan.github.io/2021/07/06/Difference-in-Debug-and-Release/","excerpt":"","text":"问题1 问题描述 在搭建EMG信号处理系统时，我需要读取一个txt文件。在debug时能正常读取。在release版本下却不能获取其中的信息。后来发现问题在于我使用了assert语句。我的读取代码如下： void Config::gen_data_list() { QFile f(select_dataset_path); assert(f.open(QIODevice::ReadOnly | QIODevice::Text)); while (!f.atEnd()) { QString l = f.readLine(); qDebug() &lt;&lt; l &lt;&lt; endl; if (l.compare('\\n') == 0) continue; else data_list.append(l.simplified()); } data_num = data_list.length(); trial_num = data_num * blk_num; } 解决办法 在release条件下，data_num始终是0。因为assert语句被忽略掉了，所以txt文件一直都没有被读取。将代码改成如下形式，release版本下也能正常读取了。 void Config::gen_data_list() { QFile f(select_dataset_path); bool isOpen = f.open(QIODevice::ReadOnly | QIODevice::Text); assert(isOpen); while (!f.atEnd()) { QString l = f.readLine(); qDebug() &lt;&lt; l &lt;&lt; endl; if (l.compare('\\n') == 0) continue; else data_list.append(l.simplified()); } data_num = data_list.length(); trial_num = data_num * blk_num; } 这样isOpen的值取决于文件是否打开。所以f.open(QIODevice::ReadOnly | QIODevice::Text)这部分的内容一定会被执行的。 在VS中，也可以在属性中打开编译调试代码开关，这样就会编译assert函数了。 原因探究 查阅相关资料后，我发现assert语句在windows下，利用VC的编译器时，会被忽略掉而不执行。这取决于release和debug时的编译器优化方式。在linux条件下，使用gcc编译时则不会忽略assert语句。其他深入的编译原理相关的原因就不再接着探究了。 总的来说，不管使用何种编译器，代码规范化是很重要的。assert语句不应该被用来检测文件读取，以及输入是否合法等问题。也不能把赋值操作等语句放在其中。总之，检查代码的时候，把assert语句去掉，如果代码的正常逻辑没有问题。那么代码就是正常的。assert应该是用来检测参数的合法性以及参数值的大小等涉及代码完备性和安全性的问题。 问题2 问题描述 在搭建EMG信号处理系统时，需要通过state参数来判断是否暂停函数中的for循环。在debug条件下，暂停和恢复都能正常运行。暂停条件下停止实验也能正常运行，但是在release条件下，暂停后就没法恢复正常运行了，而且暂停后要么会在下一个trial时停止，要么在后面恢复时，没有响应。代码块如下： for (int i = 1; i &lt;= exp_c.blk_num; i++){ for (int j = 1; j &lt;= exp_c.data_num; j++){ if (th_record_state == 2){ while (true){ if (main_th_stop){ stop_experiment(); break; } if (th_record_state == 1) break; } } for (int k = 1; k &lt;= state_num; k++){ Process(); } 需要实现的功能是，在th_record_state为1（record state）时，实验正常进行；在th_record_state为2（pause state）时，实验暂停；在th_record_state为0时，main_th_stop为true，实验结束。 解决办法 由于release版本下，VS的优化器认为while循环中的内容对外部代码没有影响，且while循环会占用很多计算量。所以在release版本下，while循环中的代码会被忽略掉。所以在while循环中加入延时，减少因为暂停导致的循环次数。这样优化器会重新加入while循环的内容。（这部分涉及到VS中的编译优化的问题，没有深究原因）。修改后的代码如下： for (int i = 1; i &lt;= exp_c.blk_num; i++){ for (int j = 1; j &lt;= exp_c.data_num; j++){ if (th_record_state == 2){ while (true){ Sleep(100); if (main_th_stop){ stop_experiment(); break; } if (th_record_state == 1) break; } } for (int k = 1; k &lt;= state_num; k++){ Process(); } 尽管这样会损失一些反应时间，但是实验系统对反应时间的要求也不高，而且Sleep函数的时间可以根据实验所需的反应时间修改。这种解决方案也可以接受。 原因探究 主要的原因还是debug和release版本下，VS的优化方法不一样。优化的参数可以在项目属性中调整。但是release版本的代码对稳定性的要求会更高，类似于数组越界，指针赋值等问题，在debug时可能没问题。但是release时就会出现问题。此时一定要检查代码的规范性问题，以及代码中的一些合理性问题，例如本文中出现的assert语句中加入文件读取语句，while循环不加延时导致大量无效循环等问题。","categories":[{"name":"LANGUAGE","slug":"LANGUAGE","permalink":"http://zijunwan.github.io/categories/LANGUAGE/"}],"tags":[{"name":"compile","slug":"compile","permalink":"http://zijunwan.github.io/tags/compile/"},{"name":"cpp","slug":"cpp","permalink":"http://zijunwan.github.io/tags/cpp/"}],"keywords":[{"name":"LANGUAGE","slug":"LANGUAGE","permalink":"http://zijunwan.github.io/categories/LANGUAGE/"}]},{"title":"powershell命令：tree","slug":"powershell-commands-tree","date":"2021-06-10T15:16:00.000Z","updated":"2023-03-10T03:57:24.215Z","comments":true,"path":"2021/06/10/powershell-commands-tree/","link":"","permalink":"http://zijunwan.github.io/2021/06/10/powershell-commands-tree/","excerpt":"","text":"显示文件夹中的文件结构，并生成txt文件或md文件。 用法如下： tree [drive:][path] [/F] [/A] &gt;[PRN] [/F]: 显示目录下的文件名 [/A]: 使用ASCII码字符 [PRN]: 存储生成的文件结构的txt或md文件","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"powershell","slug":"powershell","permalink":"http://zijunwan.github.io/tags/powershell/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"Linux 环境变量设置","slug":"Linux-Environment-Variable","date":"2021-06-01T03:02:23.000Z","updated":"2023-03-10T03:55:35.669Z","comments":true,"path":"2021/06/01/Linux-Environment-Variable/","link":"","permalink":"http://zijunwan.github.io/2021/06/01/Linux-Environment-Variable/","excerpt":"","text":"Linux环境变量在/.bashrc文件中设置。也可能在/.zshrc，也可能在/etc/profile中。设置的方法是 export PATH=“$PATH:/yourpath/” 一般是放在所有环境变量最后的。也可以放在最前面。我安装texlive的时候，放在最前面的写法没有反应。放在最后面能正常运行pdflatex等命令。然后就是路径一定要用双引号扩起来，冒号和路径之间不能有空格","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://zijunwan.github.io/tags/linux/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"Visual Studio Code 配置c++编译环境","slug":"visual-studio-code-cpp-configure","date":"2021-05-31T12:52:53.000Z","updated":"2023-03-10T04:02:26.663Z","comments":true,"path":"2021/05/31/visual-studio-code-cpp-configure/","link":"","permalink":"http://zijunwan.github.io/2021/05/31/visual-studio-code-cpp-configure/","excerpt":"","text":"原因 平时写c++大部分时间是在windows环境下，然后用Visual Studio调试和编译代码。但是由于笔记本的系统是macOS，有时候需要远程调试代码。远程调试用Teamviewer或者Microsoft Remote Desktop的话，还是不太方便。再加上也想学习一下g++编译器。相较于msvc，g++跨平台的特性更加实用。 配置 安装g++编译器（windows：MinGW，linux：sudo安装，macOS: brew安装）。必装的项目有g++，gcc，gdb， vscode安装C++扩展（C/C++） 配置lanuch.json和tasks.json文件。以下是标准的launch.json文件和tasks.json文件 lanuch.json \"configurations\": [ { \"name\": \"生成和调试活动文件\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"${workspaceFolder}/${fileBasenameNoExtension}.exe\", \"args\": [], \"stopAtEntry\": false, \"cwd\": \"${workspaceFolder}\", \"environment\": [], \"externalConsole\": true, \"MIMode\": \"gdb\", //调试模式 \"miDebuggerPath\": \"D:\\\\MinGW\\\\bin\\\\gdb.exe\", \"preLaunchTask\": \"g++\", \"setupCommands\": [ { \"description\": \"为 gdb 启用整齐打印\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": false } ] } ] tasks.json { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"shell\", \"label\": \"g++\", \"command\": \"D:\\\\MinGW\\\\bin\\\\g++.exe\", \"args\": [ \"-g\", \"${file}\", \"-o\", \"${workspaceFolder}\\\\${fileBasenameNoExtension}.exe\" ], \"options\": { \"cwd\": \"D:\\\\MinGW\\\\bin\" }, \"problemMatcher\": [ \"$gcc\" ], \"group\": \"build\", \"detail\": \"调试器生成的任务。\" //注意和lanuch.json中的文件匹配 }, ], } 然后就是写代码编译生成可执行文件了。这部分和g++编译器的内容相关。后面继续学习g++编译器。","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"http://zijunwan.github.io/tags/cpp/"},{"name":"configuration","slug":"configuration","permalink":"http://zijunwan.github.io/tags/configuration/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"Optimal Linear Estimation","slug":"Optimal-Linear-Estimation","date":"2021-05-28T08:50:27.000Z","updated":"2023-03-10T03:56:36.749Z","comments":true,"path":"2021/05/28/Optimal-Linear-Estimation/","link":"","permalink":"http://zijunwan.github.io/2021/05/28/Optimal-Linear-Estimation/","excerpt":"","text":"背景 最优线性估计算法是神经解码中一种比较常用的算法。在算法刚提出来的时候，其解码精度和解码速度都属于较高的水准，因此在脑机接口实验中应用广泛。随着神经网络的兴起以及传统机器学习算法的更新，BCI领域用来解码的算法也越来越多，例如KF，UKF，RNN，CNN等。OLE尽管计算精度不如目前的算法，但是计算量小，反馈迅速。因此目前在线的BCI实验OLE的应用仍然较多。 算法推导 OLE算法是PVA算法的改进，PVA算法在之前的Blog中有提到，是BCI中应用最早的算法。但是PVA有自己的缺陷，即很依赖数据的质量。这里的质量指的是用于解码的神经元集群的偏好方向分布。如果偏好方向的分布不均匀，朝某个方向的神经元占大多数，那么解码得到的方向就会偏向于这个方向，导致朝其他方向的运动很困难。为了解决这个问题，Chase等人提出了对于PVA算法的改进方法，即OLE算法[1]。 OLE算法的核心思想就是利用线性插值的方法，把神经元的偏好方向调整到尽量在各个方向都是均匀分布的。我们假设有2个神经元，偏好方向如图1中红色和蓝色的虚线所示。当朝各个方向运动时，神经元的发放率变化程度会不一样。当朝着神经元偏好方向运动时，神经元会更活跃，朝反方向运动时，会更加被抑制。但是当朝着垂直于偏好方向的方向运动时，神经元的发放率不会有明显变化，此时，解码误差会很大，或者说，很难解码到朝这个方向的运动。 为了便于理解这个问题，我们可以用一个更极端的假设，即所有神经元的偏好方向都朝向x轴正方向，那么此时对于y轴的运动，是无法通过神经元解码得到的。PVA的计算公式里，y轴运动的参数\\(b_1\\)是0。这里有一个需要理解的概念，即神经元集群的解码，不是取决于神经元的发放率，而是发放率的变化。朝哪个方向运动能有神经元有强烈的发放率变化，那么朝这个方向的运动解码就准确。 图1: Bias Preferred Direction 为了解决上述问题，Chase等人提出了OLE算法，具体的计算方法如下： 假设神经元的发放率为\\(r(t)\\)。神经元的偏好方向矩阵为\\(B\\)，当前的运动方向为\\(d(t)\\)。那么有： \\[r(t) = B * d(t) + \\epsilon(t) \\] 其中\\(\\epsilon(t)\\)表示\\(t\\)时刻的噪声。假设神经元的个数为\\(N\\)，那么\\(r(t) \\in R^{Nx1}\\)。假设解码的维度为\\(d\\)，那么\\(B \\in R^{Nx(d+1)}\\)。这里加1表示常数项。 那么，预测的运动方向为： \\[d_{pred}(t) = (B'B)^{-1}B'r(t)\\] 以上就是OLE算法的计算内容。和PVA算法比较，似乎没什么太大的差别。但是思想是不同的。 首先，PVA的计算，前提假设就包括了神经元的分布是均匀的。体现在这里，即\\(B'B=I\\)，其中\\(I\\)表示单位矩阵。那么上述公式可以写为：\\(d_{pred}(t) = B'r(t)\\)。即PVA的计算方法，单独计算每个神经元的发放率，然后计算在当前偏好方向的投影，然后求和之后得到预测的运动方向。 对于OLE的计算，更加像是先计算了神经元分布的均匀度。然后根据不同方向的运动权重重新分布当前的偏好方向。使得神经元分布更加均匀。即\\(B'B\\)这个矩阵的计算值，也就是运动维度的协方差。这里举个例子，假设所有神经元的偏好方向都是x轴正方向，那么\\(B'B=[[1, 1], [0, 0]]\\)。 这个时候x轴和y轴的运动都会存在。即我们把神经元的偏好方向从x轴正方向旋转了45度。Chase的文章中的图可以很好的解释这个原理： 图2: Optimal Prefered Direction 需要注意的是，\\(B\\)矩阵的计算方法和PVA算法是一致的。 以上就是OLE算法的计算过程了，OLE的计算方法和PVA很像，但是解决了神经元分布不均匀的问题。这个问题在BCI中很常见，所以OLE相较于PVA，效果一般都是会更好的。还有一种改进版的OLE算法-'full OLE'。之前介绍的这种是'minimal OLE'。 ‘full OLE' 相较于'minimal OLE'的区别在于其假设了神经信号中存在了同源或相似的噪声。那么在计算过程中，这种噪声会体现在解码的结果上，导致运动方向产生误差。其改进方法也很简单，只是在预测公式中，加入了所有通道神经元的协方差矩阵，如下： \\[d_{pred}(t) = (B'\\Sigma B)^{-1}B'r(t)\\] 这里的\\(\\Sigma\\)就是协方差矩阵，如果神经信号之间没有相关性，即没有同源噪声的话，\\(\\Sigma = I\\)。也就是'minial OLE'的计算方法了。 代码 后续会附上代码链接 参考文献 [1] S. M. Chase, A. B. Schwartz, and R. E. Kass, \"Bias, optimal linear estimation, and the differences between open-loop simulation and closed-loop performance of spiking-based brain–computer interface algorithms,\" Neural networks, vol. 22, no. 9, pp. 1203-1213, 2009.","categories":[{"name":"ALGORITHMS","slug":"ALGORITHMS","permalink":"http://zijunwan.github.io/categories/ALGORITHMS/"}],"tags":[{"name":"ole","slug":"ole","permalink":"http://zijunwan.github.io/tags/ole/"}],"keywords":[{"name":"ALGORITHMS","slug":"ALGORITHMS","permalink":"http://zijunwan.github.io/categories/ALGORITHMS/"}]},{"title":"ZJU RVPN 初始化失败的解决办法","slug":"ZJU RVPN Initialize Failed","date":"2021-05-03T10:29:42.000Z","updated":"2023-03-10T04:02:52.154Z","comments":true,"path":"2021/05/03/ZJU RVPN Initialize Failed/","link":"","permalink":"http://zijunwan.github.io/2021/05/03/ZJU%20RVPN%20Initialize%20Failed/","excerpt":"","text":"问题描述 在 macOS系统，遇见easyconnect一直提示初始化失败的问题。重新安装后仍旧不能解决问题。后发现是macOS系统开机时禁止启动了两个easyconnect的进程。分别为： 1. com.sangfor.EasyMonitor.plist 2. com.sangfor.ECAgentProxy.plist 禁止后easyconnect无法启动代理，连接校内网络 解决办法 用软件Tencent Lemon设置开机启动项，在“未知应用“选项中找到对应的进程，打开开机启动项。然后重启电脑，即可解决问题","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"vpn","slug":"vpn","permalink":"http://zijunwan.github.io/tags/vpn/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"Berkeley-CS-61A","slug":"Berkeley-CS-61A","date":"2020-05-16T09:01:22.000Z","updated":"2022-01-18T09:44:03.254Z","comments":true,"path":"2020/05/16/Berkeley-CS-61A/","link":"","permalink":"http://zijunwan.github.io/2020/05/16/Berkeley-CS-61A/","excerpt":"","text":"Berkeley CS 61C Lecture-1 不是所有的问题都能用计算机解决，也不是所有的问题，用计算机解决更加方便 学会抽象的看待事物，不需要了解其中的详细构造","categories":[{"name":"COURSE","slug":"COURSE","permalink":"http://zijunwan.github.io/categories/COURSE/"}],"tags":[{"name":"compile","slug":"compile","permalink":"http://zijunwan.github.io/tags/compile/"},{"name":"notes","slug":"notes","permalink":"http://zijunwan.github.io/tags/notes/"}],"keywords":[{"name":"COURSE","slug":"COURSE","permalink":"http://zijunwan.github.io/categories/COURSE/"}]},{"title":"最小二乘法","slug":"Linear-Square-Method","date":"2020-04-16T17:09:41.000Z","updated":"2023-03-10T03:55:18.082Z","comments":true,"path":"2020/04/17/Linear-Square-Method/","link":"","permalink":"http://zijunwan.github.io/2020/04/17/Linear-Square-Method/","excerpt":"","text":"这几天看书的时候突然注意到了这个经典的优化方法，于是重新推导了一遍，为以后应用做参考。 背景 最小二乘法应该是我接触的最早的优化方法，也是求解线性回归的一种方法。线性回归的主要作用是用拟合的方式，求解两组变量之间的线性关系（当然也可以不是线性的，那就是另外的回归方法了）。也就是把一个系统的输出写成输入的线性组合的形式。而这组线性关系的参数求解方法，就是最小二乘法。 我们从最简单的线性回归开始，即输入和输出都是1维的。此时，最小二乘法也是最简单的。 假设有输入信号\\(x = \\{x_0, x_1, ..., x_t\\}\\)，同时输出信号为\\(y = \\{y_0, y_1, ..., y_t\\}\\)，我们假设输入信号\\(x\\)和输出信号\\(y\\)之间的关系可以写成如下形式： \\[y_{pre} = ax+b \\tag{1}\\] 我们需要求解最优的\\(a\\)和\\(b\\)，这里最优的含义就是，预测的最准确，也就是预测值和真实值的误差最小，即： \\[arg\\, min_{a, b}{\\sum_{i=0}^{t}{(y_i-ax_i-b)^2}} \\tag{2}\\] 我们假设误差函数为： \\[err = \\sum_{i=0}^{t}{(y_i-ax_i-b)^2} \\tag{3}\\] \\(err\\)对\\(a\\)和\\(b\\)分别求偏导： \\[\\frac{\\partial{err}}{\\partial{a}} = \\sum_{i=0}^{t}{2(ax_i+b-y_i)*x_i} \\tag{4}\\] \\[\\frac{\\partial{err}}{\\partial{b}} = \\sum_{i=0}^{t}{2(ax_i+b-y_i)} \\tag{5}\\] 根据极值定理，有\\[\\frac{\\partial{err}}{\\partial{a}}=0\\]，且\\[\\frac{\\partial{err}}{\\partial{b}}=0\\]，所以有： \\[\\sum_{i=0}^{t}{2(ax_i+b-y_i)} = 0 \\tag{6}\\] \\[\\sum_{i=0}^{t}(y_i - ax_i) = \\sum_{i=0}^{t}{b} \\tag{7}\\] \\[\\sum_{i=0}^{t}{y_i} - a * \\sum_{i=0}^{t}{x_i} = (t+1)*b \\tag{8}\\] \\[b = \\bar{y} - a\\bar{x} \\tag{9}\\] 其中，\\(\\bar{y}\\)表示\\(y\\)的均值，\\(\\bar{x}\\)表示\\(x\\)的均值。将Eq(9)代入Eq(4)，有： \\[\\sum_{i=0}^{t}{2(ax_i+b-y_i)*x_i} = 0 \\tag{10}\\] \\[\\sum_{i=0}^{t}{ax_i^2} + \\sum_{i=0}^{t}bx_i = \\sum_{i=0}^{t}{y_ix_i} \\tag{11}\\] \\[a\\sum_{i=0}^{t}x_i^2 + \\bar{x}(\\bar{y}-a\\bar{x}) = \\sum_{i=0}^{t}{x_iy_i} \\tag{12}\\] \\[a(\\sum_{i=0}^{t}{x_i^2 - \\bar{x}^2}) = \\sum_{i=0}^{t}{x_iy_i}-\\bar{x}\\bar{y} \\tag{13}\\] \\[a = \\frac{\\sum_{i=0}^{t}{x_iy_i}-\\bar{x}\\bar{y}}{\\sum_{i=0}^{t}{x_i^2 - \\bar{x}^2}} \\tag{14}\\] 所以Eq(14)和Eq(9)就是最简单的最小二乘法的计算方法。 然后我们进一步考虑，如果输入和输出是多维数据，要如何计算。 假设输入信号为\\(X \\in R^{m*t}\\)， 输出信号为\\(Y \\in R^{n*t}\\)，那么有： \\[Y = W_0X+B = WX_1 \\tag{15}\\] 其中\\(W_0 \\in R^{n*m}\\)是回归矩阵的系数，\\(B \\in R^{1*t}\\)表示常数项，这里可以直接写到\\(W\\)矩阵中。\\(W \\in R^{(m+1)*t}\\)，\\(X_1 \\in R^{(m+1)*t}\\) \\[ X_1 = \\begin{bmatrix} x_{11} &amp;x_{12} &amp; ... &amp;x_{1t}\\\\ x_{11} &amp;x_{12} &amp; ... &amp;x_{1t}\\\\ {\\vdots} &amp;{\\vdots} &amp;... &amp;{\\vdots}\\\\ x_{m1} &amp;x_{m2} &amp;... &amp;x_{mt}\\\\ 1 &amp;1 &amp;... &amp;1\\\\ \\end{bmatrix} \\tag{16} \\] 所以有： \\[\\arg min_{W}({Y-WX_1}) \\tag{17}\\] 假设误差函数为\\(E\\)，则有： \\[E = (Y-WX_1)(Y-WX_1)^T = YY^T - WX_1Y^T-YX_1^TW^T+WX_1X_1^TW^T \\tag{18}\\] 计算\\(E\\)对\\(W\\)的偏导，则该偏导等于0： \\[\\frac{\\partial{E}}{\\partial{W}} = -X_1Y^T-X_1^TY + 2WXX^T = 0 \\tag{19}\\] 所以有： \\[W = (X_1X_1^T)^{-1}X_1Y^T \\tag{20}\\] 至此矩阵形式的最小二乘法（多元线性回归的参数解法）推导完成。注意这里的\\(X_1\\)和\\(Y\\)中的数据排列方式为：每一行是一个维度的数据，每一列表示一个时间点。如果不是这么记录的话，那么公式需要加上转置。 后续会附上代码链接","categories":[{"name":"ALGORITHMS","slug":"ALGORITHMS","permalink":"http://zijunwan.github.io/categories/ALGORITHMS/"}],"tags":[{"name":"linear regression","slug":"linear-regression","permalink":"http://zijunwan.github.io/tags/linear-regression/"}],"keywords":[{"name":"ALGORITHMS","slug":"ALGORITHMS","permalink":"http://zijunwan.github.io/categories/ALGORITHMS/"}]},{"title":"维纳滤波","slug":"Wiener-Filter","date":"2020-04-13T09:32:08.000Z","updated":"2023-03-10T04:02:37.667Z","comments":true,"path":"2020/04/13/Wiener-Filter/","link":"","permalink":"http://zijunwan.github.io/2020/04/13/Wiener-Filter/","excerpt":"","text":"因为最近看文章接触了维纳滤波，所以这里写一下Weiner Filter的一些简单理解和推导。 基本定义 维纳滤波是一种在含噪声的时序信号把信号提取出来的滤波器，其基本框图如下： 图-1：简单的Wiener-Filter 简单的维纳滤波其实就是通过一个FIR滤波器，去除噪声的过程。在这里，\\(h\\)的作用也可以理解为： 通过训练集的数据对信号和噪声的建模，然后通过前几个点的信息，预测当前时刻的噪声信号所占的比例，然后去除掉，剩下的就是预测的时序信号了。维纳滤波作为一种使用很广泛的滤波器，其变化的形式也有很多种，可以是单输入输出的，也可以是多输入输出的。\\(h\\)所表示的变换也可以写成非线性；\\(h\\)可以是有限长的FIR滤波器，也可以是无限长的IIR滤波器。要取决于当前你所解决的问题。但是维纳滤波的基本思想还是一致的。通过滤波（矩阵或者其他模型的形式）来从信号和噪声的混合中提取信号。所以维纳滤波的核心，就是计算这个滤波器（矩阵\\(h\\)或者模型的参数）。也就是解Wiener-Hopf方程。 本文用比较简单的单输入输出，且只考虑有限长滤波（即认为当前时刻的信号只和前有限个时间点的信号相关）。 公式推导 首先，对于图1中的滤波器： \\[y(n) = x(n) * h(n) = (s(n)+v(n))*h(n) \\tag{1}\\] 其中\\(*\\)表示卷积，\\(x(n)\\)表示输入信号， \\(y(n)\\)表示输出信号， \\(s(n)\\)表示输入信号中，有用的信号部分；\\(v(n)\\)表示输入信号中的噪声部分。 维纳滤波的目标是，保证输出\\(y(n)\\)和真实信号\\(s(n)\\)的差别最小，由于\\(y(n)\\)和\\(s(n)\\)是时序信号，所以要保证两者的均方误差最小，所以有： \\[E\\{e^2(n)\\} = E\\{(y(n)-s(n))^2\\} = E\\{(x(n)*h(n)-s(n))^2\\} \\tag{2} \\] 即求使得Eq(2)最小的\\(h\\)。所以\\(E\\{e^2\\}\\)对\\(h\\)求偏导。有： \\[\\frac{\\partial{E\\{e^2(n)\\}}}{\\partial{h}} = 2E\\{e(n) * \\frac{\\partial{e(n)}}{\\partial{h}}\\} = 0 \\tag{3} \\] \\[\\frac{\\partial{E\\{e^2(n)\\}}}{\\partial{h}} = 2E\\{[\\sum_{m=0}^{N-1}{h(m)x(n-m) - s(n)}]x(n-j)\\}, j = 0, 1, ... , N-1 \\tag{4} \\] \\[\\frac{\\partial{E\\{e^2(n)\\}}}{\\partial{h}} = 2\\sum_{m=1}^{N-1}{h(m)}E\\{x(n-j)x(n-m)\\} - 2E\\{s(n)x(n-j)\\} = 0, j = 0, 1, ..., N-1 \\tag{5} \\] 我们设\\(x\\)和\\(s\\)的相关系数为\\(R_{xs}\\)，则有： \\[R_{xs}(j)=\\sum_{m=0}^{N-1}{h(m)R_{xx}(j-m)}, j=0,1,...,N-1 \\tag{6}\\] 其中，\\(R_{xx}(j-m)\\)表示\\(x(n-j)\\)和\\(x(n-m)\\)的相关系数，这里\\(m\\)是固定的，\\(j\\)是变化的。且\\(m&gt;=0\\)，\\(R_{xs}(j)\\)表示\\(x(n-j)\\)和\\(s(n)\\)的相关系数。上述公式中，\\(n\\)表示的是时序信号中的时间点。 然后，根据Eq(6)，可以得到\\(N\\)个线性方程： \\[ \\begin{cases} R_{xs}(0)=h(0)R_{xx}(0)+h(1)R_{xx}(1)+...+h(N-1)R_{xx}(N-1)\\\\ R_{xs}(1)=h(1)R_{xx}(1)+h(0)R_{xx}(0)+...+h(N-1)R_{xx}(N-2)\\\\ ...\\\\ R_{xs}(N-1)=h(N-1)R_{xx}(N-1)+h(N-2)R_{xx}(N-2)+...+h(0)R_{xx}(0)\\\\ \\end{cases} \\tag{7} \\] 写成矩阵形式，有： \\[\\displaystyle \\boldsymbol{R_{xx}H}=\\boldsymbol{R_{xs}} \\tag{8}\\] 其中， \\(\\displaystyle \\boldsymbol{H} = [h(0), h(1),...,h(N-1)]^T\\)是需要求的滤波器参数 \\[\\displaystyle \\boldsymbol{R_{xs}} = [R_{xs}(0),R_{xs}(1), ..., R_{xs}(N-1)]^T\\]是\\(x\\)和\\(s\\)的相关系数 \\[ \\displaystyle \\boldsymbol{R_{xx}} = \\begin{bmatrix} R_{xx}(0)&amp;R_{xx}(1)&amp;...&amp;R_{xx}(N-1)\\\\ R_{xx}(1)&amp;R_{xx}(0)&amp;...&amp;R_{xx}(N-2)\\\\ {\\vdots}&amp;{\\vdots}&amp;...&amp;{\\vdots}&amp;\\\\ R_{xx}(N-1)&amp;R_{xx}(N-2)&amp;...&amp;R_{xx}(0)\\\\ \\end{bmatrix} \\tag{9} \\] 所以根据Eq(8)可以求得： \\[\\displaystyle \\boldsymbol{H} = \\boldsymbol{R_{xx}^{-1}R_{xs}} \\tag{10}\\] 此时，信号的均方误差最小，根据Eq(2)，可得： \\[E\\{e^2(n)\\} = E\\{(s(n)-\\sum_{m=0}^{N-1}h(m)x(n-m))^2\\} \\tag{11}\\] \\[E\\{e^2(n)\\} = E\\{s^2(n) - 2s(n)\\sum_{m=0}^{N-1}h(m)x(n-m)+\\sum_{m=0}^{N-1}\\sum_{r=0}^{N-1}{h(m)x(n-m)h(r)x(n-r)}\\}\\] \\[E\\{e^2(n)\\}=R_{ss}(0)-2\\sum_{m=0}^{N-1}{h(m)R_{xs}(m)+\\sum_{m=0}^{N-1}{h(m)}\\sum_{r=0}^{N-1}{h(r)R_{xx}(n-r)}}\\] 根据Eq(5)，可得： \\[E\\{e^2(n)\\} = R_{ss}(0) - \\sum_{m=0}^{N-1}{h(m)R_{xs}(n-m)} \\tag{12}\\] 假设信号\\(s(n)\\)和噪声\\(v(n)\\)互相独立，那么有： \\[R_{sv}= R_{vs} = 0\\] \\[R_{xs} = R_{ss} + R_{vs} = R_{ss}\\] \\[R_{xx} = R_{ss}+R_{sv}+R_{vs}+R_{vv} = R_{ss}+R_{vv}\\] 则，根据Eq(12)，有： \\[E\\{e^2(n)\\} = R_{ss}(0) - \\sum_{m=0}^{N-1}{h(m)R_{ss}(m)} \\tag{14}\\] 至此，最简单的维纳滤波的基本公式推导完成，如果涉及到多输入多输出的维纳滤波，会更加复杂，这里不做推导。后续会附上代码链接","categories":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}],"tags":[{"name":"wiener","slug":"wiener","permalink":"http://zijunwan.github.io/tags/wiener/"}],"keywords":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}]},{"title":"python_note","slug":"python-note","date":"2020-03-20T07:00:48.000Z","updated":"2023-03-10T03:58:39.500Z","comments":true,"path":"2020/03/20/python-note/","link":"","permalink":"http://zijunwan.github.io/2020/03/20/python-note/","excerpt":"","text":"Python Basic Knowledge python中新建一个变量并赋值，在计算机中是怎么处理的 x = 1 例如上述代码，计算机首先是开辟一块内存 ，如果是C++，Java等静态语言，那么会根据变量类型指定内存大小。如果是python等动态语言，则智能开辟内存大小，在内存中写入这一数据；但是计算机到目前为止，还不能将x和该值绑定，所以计算机中还会开辟一块内存，名字为x，然后将这一内存指向刚才开辟的内存地址。 python中没有指针的概念，例如下面的代码 x = 1 y = x x = 2 在python中，这一过程是这样的： 开辟内存，存入1，开辟内存，存入x，并将x指向刚才开辟的存入1的内存 开辟内存，存入y，并将y也指向x指向的那块内存 开辟内存，存入2，并将x指向新开的地址 如果是在C++, Java等有指针概念的语言中，第二步应该是这样的，开辟新的内存，将x指向的地址的值复制一份存入新地址，开辟内存，存入y，并指向新地址 python循环 python中的循环有如下2种方式： for循环 python中的for循环的写法是for x in y, 也就是遍历数组y中的所有变量，提取出来的数是x，在数值计算中运用最多的是for x in range(1, 100), 这种方法是定义了一个1到100的数组，通过range函数，在内存中存储这样的数组，再遍历 while循环 这种方法和其他语言类似，不再赘述 python函数 在python中，函数名是指向函数对象的一个引用，所以在python中，可以把函数名赋值给一个变量，这有点类似于matlab中的@func句柄的意思。 也就是说在python中，函数名对应的内存中，只存储了函数的名字以及对应这个Object的地址，所以可以幅值给另外一个变量。真正的函数对象是存储在另外的内存中的 函数的默认参数 def add_end(L=[]): L.append('END') return L 这样一个函数，用默认参数调用一次，结果是['END']，调用两次，结果是['END', 'END']，这是因为，函数在运行时，默认参数也是存放在一块内存中的，每次调用时，由于内存 能够写入，所以每次运行完函数后，默认参数对应的内存都会刷新。所以python中，默认参数最好写成不变的量。 python迭代器 python中可以通过列表生成式的方式得到（类似于Matlab中的矩阵运算）。但是列表很大的时候，而且列表的数据很有规律（例如range(10000000)），但是又只需要用到列表中的少量数据，那么可以用迭代器(generator)的方法，描述列表的数字规律，当需要某个数时，根据规律计算得到，就不需要占用很大的内存了。 函数闭包(closure) 一个函数将另外一个函数作为返回值，并且在返回的函数中存储了内部的局部变量，这种方法称为闭包。闭包能保存原有的局部变量，在调用函数时引用，应用范围较广。但是闭包的应用中，要注意不能引用循环变量。因为闭包返回的函数是等所有函数都返回了才执行，而当所有函数都返回时，循环变量已经变为最终值。 偏函数 偏函数存在于functiontools中，主要的作用就是固定函数的某些参数，其返回值是一个函数。 线程锁 线程与进程的一个不同之处在于，进程之间的变量是独立的，如果两个进程同时读写某一内存，那么用Queue或者Pipe来保证读写的顺序。同时，进程只是把数据读取到自己的运算域内，相当于把数据拷贝一份。但是线程不一样，线程之间的变量是共享的，所以会导致线程对变量的赋值混乱。所以我们需要用线程锁。获得线程锁的线程，会保证在运行期间，变量只能由该线程修改。从而保证变量不会混乱。但是线程锁用完了一定要释放，最好用try…finally保证一定会释放。不然其他线程永远不能修改。但是线程锁也有缺陷，在一些并发线程中并不适用。 GIL锁 在Python的解释器中，有GIL(Global Interpreter Lock)。Python的线程在执行前，一定要获得GIL锁，然后一定时间后，解释器释放GIL锁，然后其他线程再获得GIL锁。这样会保证，同一个进程的多个线程，最多只能用到CPU的一个核。而不能跑满CPU。如果要充分利用CPU，那么可以用多进程的方式，或者用其他的语言实现，例如C，Java等。 正则表达式 正则表达式的基本表达方式 标签 含义 匹配1个数字 匹配1个字母或1个数字 . 可以匹配任何符号 ×(star) 表示任意长度的字符 + 表示至少1个字符 ? 表示0个或1个字符 {n} 表示n个字符 {n,m} 表示n-m个字符 匹配一个空格 [] 用来表示范围 | 表示或 ^ 匹配一行的开头 $ 匹配一行的结尾 () 表示分组 正则表达式一般采用贪婪匹配，也就是说，如果前面的表达式符合要求，会一直匹配到不符合要求的那个数字，有可能导致后面的表达式匹配到空字符串。如果不想用贪婪匹配，那么需要在每一段表达式后面加上?。 难理解的点 元类，metaclass 装饰器，decorator Note _annotations_ 属性定义了函数参数的类型，例如int，str等。可以修改这一参数来明确函数的输入对应类型 &gt;&gt;&gt; def demo(param1:int, param2:str)-&gt;str: ... return param1 * param2 ... &gt;&gt;&gt; demo([1, 2, 3, 4], 3) [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4] &gt;&gt;&gt; demo(20, '3') '33333333333333333333' &gt;&gt;&gt; demo('20', 3) '202020' &gt;&gt;&gt; demo(20, 3) 60 &gt;&gt;&gt; demo.__annotations__ {'param1': &lt;class 'int'&gt;, 'param2': &lt;class 'str'&gt;, 'return': &lt;class 'str'&gt;}","categories":[{"name":"LANGUAGE","slug":"LANGUAGE","permalink":"http://zijunwan.github.io/categories/LANGUAGE/"}],"tags":[{"name":"notes","slug":"notes","permalink":"http://zijunwan.github.io/tags/notes/"},{"name":"python","slug":"python","permalink":"http://zijunwan.github.io/tags/python/"}],"keywords":[{"name":"LANGUAGE","slug":"LANGUAGE","permalink":"http://zijunwan.github.io/categories/LANGUAGE/"}]},{"title":"Linear Algebra","slug":"Linear-Algebra","date":"2020-02-23T05:32:52.000Z","updated":"2022-01-18T09:47:48.708Z","comments":true,"path":"2020/02/23/Linear-Algebra/","link":"","permalink":"http://zijunwan.github.io/2020/02/23/Linear-Algebra/","excerpt":"","text":"线性代数 本文主要记录学习过程中遇到的线性代数的基本概念以及公式 Basic Concept 行列式的计算 矩阵的行列式等于矩阵中任意一行的值","categories":[{"name":"ALGORITHMS","slug":"ALGORITHMS","permalink":"http://zijunwan.github.io/categories/ALGORITHMS/"}],"tags":[{"name":"linear algebra","slug":"linear-algebra","permalink":"http://zijunwan.github.io/tags/linear-algebra/"}],"keywords":[{"name":"ALGORITHMS","slug":"ALGORITHMS","permalink":"http://zijunwan.github.io/categories/ALGORITHMS/"}]},{"title":"梯度下降法","slug":"Gradient-Descent-Method","date":"2020-02-06T07:25:52.000Z","updated":"2023-03-10T03:52:40.040Z","comments":true,"path":"2020/02/06/Gradient-Descent-Method/","link":"","permalink":"http://zijunwan.github.io/2020/02/06/Gradient-Descent-Method/","excerpt":"","text":"这篇Blog的主要内容是关于梯度下降法的一些理解，以及相关的公式推导。梯度下降法很早之前就接触过，但是因为长时间不用，所以理解上也有了一些欠缺，今天看了一些参考文献，写一下自己的一些理解。便于以后帮助自己回忆。 Artificial Neural Network 关于人工神经网络，这是目前使用最广泛的一类算法了。神经网络和其他的算法相比较，计算更加直接。不需要去推导公式，去计算两者的关系，直接通过网络的方式连接，然后用大量的数据训练，没有关系的连接权重逐渐变弱，有关系的权重逐渐变强。如果把输入和输出的函数关系写出来，会发现是一个很复杂的非线性公式。也正是因为这一点，神经网络的拟合程度比普通的线性，非线性算法都要好。 Gradient Descent 对于用梯度下降法训练神经网络，我之前一直没有弄明白的点是为什么梯度的方向就是函数增加最快的方向， 我理解梯度方向是变化最快的方向，但是一直不理解为什么是增加的。今天看了一些参考文献，理解了一点。 对于神经网络，我们会有训练集的数据\\(\\{x_0, y_0\\}\\)，\\(x\\)和\\(y\\)之间有函数关系\\(y = f(x)\\)，函数有自己的参数\\(p\\)，对应于神经网络的权值。所以有\\(y = f(p, x)\\)。为了能够训练神经网络，让输出和预期值越来越接近，可以定义损失函数(Loss Function)，有\\(l = L(x_0, y_0, y)\\)。其中\\(y = f(p, x_0)\\)，所以： \\[l = L(p, y_0, x_0)\\] 计算\\(l\\)关于\\(p\\)的梯度，所以： \\[\\bigtriangledown{C_{xr}(p)} = &lt; \\frac{\\partial{C_{xr}}}{\\partial{p^{(0)}}}, ..., \\frac{\\partial{C_{xr}}}{\\partial{p^{(n)}}}\\] 沿梯度方向，损失函数\\(l\\)的值是逐渐增加的 对这句话的理解，在于是什么量沿着梯度方向的变化。应该是自变量\\(p\\)。例如： 当\\(\\frac{\\partial{C_{xr}}}{\\partial{p^{(0)}}}（p_0） &gt; 0\\)时，也就是说，函数\\(l(p^{0})\\)在\\(p_0\\)点时，函数曲线沿\\(p=p^0\\)的切线斜率是大于0的，也就是说，在很小的一个区间\\((p_0-\\delta, p_0+\\delta)\\)，如果\\(p_1 &gt; p_0\\)， 那么有\\(l(p_1) &gt; l(p_0)\\)。所以，如果沿着梯度的负方向，损失函数的值也会降低。对于梯度大于0，会比较好理解，因为\\(l\\)是增函数。 如果\\(\\frac{\\partial{C_{xr}}}{\\partial{p^{(0)}}}(p_0) &lt; 0\\)，那么有\\(l(p^0)\\)是减函数，也就是说，函数在\\(p_0\\)点沿\\(p = p^0\\)的切线斜率是小于0的。即，在很小的一个区间\\((p_0-\\delta, p_0+\\delta)\\)，如果\\(p_1 &gt; p_0\\)， 那么有\\(l(p_1) &lt; l(p_0)\\)。但是由于梯度本身小于0，所以梯度的反方向就是\\(p^0\\)递增的方向。又因为\\(l(p^0)\\)是减函数，所以沿梯度的负方向，\\(l(p^0)\\)还是会逐渐降低。 Neural Network中梯度下降法的推导 这里用最简单的全连接网络为例，如图所示： 全连接网络 \\(x\\)：网络的输入值 \\(w_1, w_2, w_3\\)：层与层的连接参数 \\(h_1, h_2\\)：中间层的输入值 \\(o_1,o_2\\)：中间层的输出值 \\(y\\)：网络的输出值 假设输入参数的个数为\\(m\\)，输出参数的个数为\\(n\\)，第一层的神经元个数为\\(a\\)，第二层的神经元参数为\\(b\\)，所以： \\(x \\in R^{1*m}\\) \\(y \\in R^{1*n}\\) \\(h_1, o_1 \\in R^{1*a}\\) \\(h_2, o_2 \\in R^{1*b}\\) \\(w_1 \\in R^{m*a}\\) \\(w_2 \\in R^{a*b}\\) \\(w_3 \\in R^{b*n}\\) 网络中每层的激活函数(activation function)用sigmoid函数： \\(f(x) = \\frac{1}{1+e^{-x}}\\) sigmoid函数的导数有如下特点(可以自己推导)： \\(f'(x) = f(x)*(1-f(x))\\) 假设用来训练的数据集为\\(&lt;x, r&gt;\\)，\\(x\\)为输入值，\\(r\\)为输出值 损失函数为： \\(L = \\frac{1}{2}*(y-r)^{2}\\) 所以有如下公式： \\[h_1=w_1*x+b_1\\] \\[o_1=sigmoid(h_1)\\] \\[h_2=w_2*o_1+b_2\\] \\[o_2=sigmoid(h_2)\\] \\[h_3=w_3*o_2+b_3\\] \\[y=sigmoid(h_3)\\] 计算\\(L\\)关于\\(w_3\\)的梯度，有： \\[\\frac{\\partial{L}}{\\partial{w_3}}=(y-r)*\\frac{\\partial{(y-r)}}{\\partial{w_3}}\\] \\[=(y-r)*\\frac{\\partial{(y-r)}}{\\partial{h_3}}*\\frac{\\partial{h_3}}{\\partial{w_3}}\\] \\[= (y-r)*(y-r)*[1- (y-r)]*o_2\\] \\[= (y-r)^{2} * (1-y+r) * o_2\\] 类似的，可以得到： \\[\\frac{\\partial{L}}{\\partial{b_3}}=(y-r)^{2}*(1-y+r)\\] \\[\\frac{\\partial{L}}{\\partial{w_2}}=(y-r)^{2} * (1-y+r) * w_3 * o_2 * (1-o_2) * o_1\\] \\[\\frac{\\partial{L}}{\\partial{b_2}}=(y-r)^{2} * (1-y+r) * w_3 * o_2 * (1-o_2)\\] \\[\\frac{\\partial{L}}{\\partial{w_1}}=(y-r)^{2} * (1-y+r) * w_3 * o_2 * (1-o_2) * o_1 * (1-o_1) * x\\] \\[\\frac{\\partial{L}}{\\partial{b_1}}=(y-r)^{2} * (1-y+r) * w_3 * o_2 * (1-o_2) * o_1 * (1-o_1)\\] 计算损失函数\\(L\\)关于网络权重的梯度后，网络权重的变化为： \\[\\bigtriangleup W = - \\eta * \\frac{\\partial{L}}{\\partial{W}}\\] 其中， \\(W\\)是网络中的权重参数，一般只通过学习率来调节网络训练的快慢，是不够的。会加入动态变化量，以加快学习过程。所以： \\[\\bigtriangleup W=-\\eta * \\frac{\\partial{L}}{\\partial{W}} + \\alpha * \\frac{\\partial{L}}{\\partial{W}}\\] 其中，\\(\\alpha\\)表示动态变化项，是一个常数。","categories":[{"name":"DEEP LEARNING","slug":"DEEP-LEARNING","permalink":"http://zijunwan.github.io/categories/DEEP-LEARNING/"},{"name":"ALGORITHMS","slug":"DEEP-LEARNING/ALGORITHMS","permalink":"http://zijunwan.github.io/categories/DEEP-LEARNING/ALGORITHMS/"}],"tags":[{"name":"gradient descent","slug":"gradient-descent","permalink":"http://zijunwan.github.io/tags/gradient-descent/"}],"keywords":[{"name":"DEEP LEARNING","slug":"DEEP-LEARNING","permalink":"http://zijunwan.github.io/categories/DEEP-LEARNING/"},{"name":"ALGORITHMS","slug":"DEEP-LEARNING/ALGORITHMS","permalink":"http://zijunwan.github.io/categories/DEEP-LEARNING/ALGORITHMS/"}]},{"title":"无迹卡尔曼滤波","slug":"Unscented-Kalman-Filter","date":"2020-01-21T06:10:25.000Z","updated":"2023-03-10T04:01:38.684Z","comments":true,"path":"2020/01/21/Unscented-Kalman-Filter/","link":"","permalink":"http://zijunwan.github.io/2020/01/21/Unscented-Kalman-Filter/","excerpt":"","text":"最近读了一篇文献，里面用到了无迹卡尔曼滤波(Unscented Kalman Filter)。这里写一下我对这种方法的理解。卡尔曼滤波的理解部分可以参考 我的一点点理解 无迹卡尔曼滤波是对卡尔曼滤波的一种改进。这种改进主要是针对非线性的信号。因为在卡尔曼滤波中，预测模型以及测量空间对应的转换矩阵都是都是线性转换。但是在面对非线性信号时，会出现无法拟合的情况。所以就有了无极卡尔曼滤波。这种方法的主要改进在于，不再用线性的模型去计算预测模型以及转换矩阵，而是通过采样和计算均值方法的方式，去估计样本的方差和均值。 计算过程 无迹卡尔曼滤波的计算方式和卡尔曼滤波比较类似，只是讲线性转换模型换成了采样的方式。具体的原理推导比较复杂，所以这里只写一下无迹卡尔曼滤波的计算过程： 无迹卡尔曼的计算步骤和卡尔曼滤波基本是一致的，只是对其中的一些步骤进行了修改，首先，我们看一下Kalman Filter的计算过程： 建立编码模型和转换模型， 假设观测变量是\\(z\\)， 测量变量是\\(x\\)， 那么首先我们假设： 当前时刻的测量变量是可以根据上一时刻的测量变量估计： \\[ x_{t} = Fx_{t-1} + w_t, (w_t -N(0, Q)) \\] 当前时刻的观测变量可以根据测量变量估计： \\[ z_t = Hx_t + r_t, (r_t - N(0, R)) \\] 根据以上的编码模型和转换模型，Kalman Filter的计算流程如下： 首先，根据已知的模型，以及上一时刻的卡尔曼估计值，计算当前时刻的模型预测值 \\[ x_t'=Fx_{t-1} \\] 根据当前的模型预测值，计算对应的协方差 \\[ P(x_t|x_t')=FP(x_t|X_t)F^T \\] 根据当前的协方差和测量空间的转换矩阵，计算当前时刻的卡尔曼增益 \\[ K_t=P(x_t|x_t')H^T(HP(x_t|x_t')H^T+R)^{-1} \\] 根据卡尔曼增益和测量值，计算当前时刻的卡尔曼估计值 \\[ x_t=x_t'+K_t(z_t-Hx_t') \\] 计算了当前时刻的卡尔曼估计值之后，还需要计算当前的估计值和真实值的协方差矩阵，方便下一次计算 \\[ P(x_t|X_t)=(I-HK_t)P(x_t|x_t') \\] 作为线性的解码器，Kalman Filter确实能找到观测变量和测量变量之间的关系，并用观测变量去纠正当前测量变量中的误差。但是涉及到非线性关系的时候，Kalman Filter的线性假设就不成立了。这时有两种优化的方法： 如果已知这种非线性关系的公式，例如加速度和位置的关系等，那么可以把上述转换模型和观测模型换成已知的非线性模型，增加解码准确率。这种方法就是扩展卡尔曼滤波(Extend Kalman Filter)。这种方法的优点在于拟合更加准确，但是缺点也很明显。首先是计算量增加，如果非线性拟合涉及很复杂的模型，那么计算量比Kalman Filter增加很多。然后是非线性模型，并不是任何时候，这种模型都是已知的，如果不是已知的，那就需要进行非线性拟合，找到最合适的拟合模型，例如指数模型，高阶模型等，再次增加计算量。 如果不知道这种非线性关系的公式，那么我们可以进行非线性拟合或者直接假设一个公式。但是我们观察Kalman Filter的计算过程，整个估计过程中，用到了当前时刻的值，以及协方差。而这两个量，我们是能通过采样的方式得到的，即，可以不需要直接计算非线性模型的协方差矩阵，直接通过采样估计，类似蒙特卡洛的方法。但是采样的计算量会更大，因为需要大样本才能得到准确的估计。目前有另外一种办法，能够用很少的采样点(几个)就得到准确的估计，这种方法是无迹变换(Unscented Transform)，结合到Kalman Filter中，就是无迹卡尔曼滤波(Unscented Kalman Filter) 所以无迹卡尔曼滤波的主要流程如下： 计算转换模型和编码模型 建立转换模型，可以是非线性也可以是线性，这里用线性模型： \\[ x_{t} = Fx_{t-1} + w_t, (w_t -N(0, Q)) \\] 建立编码模型，也可以是线性或非线性模型： \\[ z_t = Hx_t + r_t, (r_t - N(0, R)) \\] 根据上述模型和训练集数据，用最小二乘法或其他的拟合方法，得到模型参数，然后开始无迹卡尔曼的预测和更新阶段 根据模型预测\\(x_{t}\\) \\[ x_t'=Fx_{t-1} \\] 预测\\(x_{t}\\)的协方差 \\[ P(x_t|x_t')=FP(x_t|X_t)F^T + Q \\] 用采样点估计当前协方差矩阵，先采样\\(2d+1\\)个点，并保证中心点的值为\\(x_t'\\) \\[ X_0 = x_t' \\] \\[ X_i = x_t' + (\\sqrt{(d + k)P(x_t|x_t')})_{i}, i = 1, ..., d \\] \\[ X_i = x_t' - (\\sqrt{(d + k)P(x_t|x_t')})_{i}, i = d + 1, ..., 2d \\] 计算采样点的权重值 \\[ w_0= \\frac{k}{d+k}, w_i = \\frac{1}{2d+k}, i = 1, ... 2d \\] 根据转换矩阵，采样点，计算观测值和测量值的关系 \\[ Z_i = h(X_i), i = 0, ...2d \\] \\[ z_t = \\sum_{i = 0, ...2d}{w_{i}Z_{i}} \\] 根据采样点估计的观测值，计算观测值\\(z\\)的方差，以及观测值\\(z\\)和测量值\\(x\\)的协方差 \\[ P_{zz, t} = w_{0}(Z_{0}-z_{t})(Z_{0}-z_{t})^T + (\\sum_{i=1, ...,2d}{w_{i}(Z_{i}-Z_{0})(Z_{i}-z_{0})^T}) + R \\] \\[ P_{xz, t} = w_{0}(Z_{0}-z_{t})(Z_{0}-z_{t})^T + (\\sum_{i=1, ..., 2d}{w_{i}(X_{i}-X_{0})(Z_{i}-Z{0})^T}) \\] 根据计算的协方差，可以计算Kalman增益 \\[ K = P_{xz, t}P_{zz, t}^{-1} \\] 用Kalman增益计算最有估计值 \\[ x_t = x_t' + K_t(h(x_t')-z_t) \\] \\[ P(x_t|X_t) = P(x_t|x_t')-P_{xz, t}(P_{zz, t}^{-1})^TP_{xz, t}^{T} \\] 以上就是无迹卡尔曼滤波的主要步骤，后续会附上代码链接","categories":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}],"tags":[{"name":"ukf","slug":"ukf","permalink":"http://zijunwan.github.io/tags/ukf/"}],"keywords":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}]},{"title":"Unity相关概念","slug":"Unity","date":"2020-01-21T06:10:10.000Z","updated":"2023-03-10T04:01:08.930Z","comments":true,"path":"2020/01/21/Unity/","link":"","permalink":"http://zijunwan.github.io/2020/01/21/Unity/","excerpt":"","text":"ConfigurableJoint OnEnable()函数在gameObject.setActive(true)时触发，优先于Start()，但是和Awake()函数的先后顺序不确定；OnDisable()函数在gameObject.setActive(false)时触发 Lerp() 计算两个点之间的插值，函数如下： Lerp(Vector3 a, Vector3 b, float t); 计算公式如下： \\[ (b - a) * t \\] Mathf.Approximately() 判断两个浮点数是否十分接近，使用方法如下： Mathf.Approximately(float a, float b); 返回值为bool Quaternion类 Quaternion属于四元数，包括x, y, z, w四个分量，和欧拉角一样，是3D图形中常用的坐标变换表示方法之一，对于插值，平滑以及数据存储，都有较大的优势（相较于传统的矩阵表示方法）","categories":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}],"tags":[{"name":"notes","slug":"notes","permalink":"http://zijunwan.github.io/tags/notes/"},{"name":"unity","slug":"unity","permalink":"http://zijunwan.github.io/tags/unity/"}],"keywords":[{"name":"DEVELOPMENT","slug":"DEVELOPMENT","permalink":"http://zijunwan.github.io/categories/DEVELOPMENT/"}]},{"title":"样本方差和统计方差","slug":"Two-Types-of-Variance","date":"2020-01-21T06:09:44.000Z","updated":"2023-03-10T04:00:05.029Z","comments":true,"path":"2020/01/21/Two-Types-of-Variance/","link":"","permalink":"http://zijunwan.github.io/2020/01/21/Two-Types-of-Variance/","excerpt":"","text":"我们知道，统计学上方差的计算公式如下： \\[ \\sigma^2=\\frac{\\sum_{i=1}^{n}(x_i-\\mu)}{n}\\] 这是统计学中方差的定义，已知条件有总体的均值\\(\\mu\\)，以及总体个数\\(n\\)，公式的另一种写法为： \\[\\sigma^2=E[(x-\\mu)^2]=\\sum{(x-\\mu)^2}p(x)\\] 其中\\(p(x)\\)是\\(x\\)出现的概率，所以这个公式只对于离散变量有效。 那么，如果总体量很大，不能做到全部采样，那么就需要用样本来估计总体，假设从总体为\\(N\\)的总数中抽取\\(n\\)个样本，其中\\((N&gt;&gt;n)\\)，采样值为\\(x_1,x_2,...,x_n\\) 样本均值为： \\[\\bar{x}=\\frac{\\sum_{i=1}^{n}{x_i}}{n}\\] 样本的方差为： \\[ S^2=\\frac{\\sum_{i=1}^{n}(x_i-\\bar{x})}{n}\\] 但是样本的方差和总体的方差是有差别的，计算样本方差的期望值，来估计样本方差和实际方差\\(\\sigma^2\\)之间差了多少： \\[ E[S^2]=E[\\frac{\\sum_{i=1}^{n}(x_i-\\bar{x})}{n}]\\] \\[=E[\\frac{1}{n}\\sum_{i=1}^{n}{((x_i-\\mu)-(\\bar{x}-\\mu))^2}]\\] \\[=E[\\frac{1}{n}\\sum_{i=1}^{n}{((x_i-\\mu)^2-2(x_i-\\mu)(\\bar{x}-\\mu)+(\\bar{x}-\\mu)^2)}]\\] \\[=E[\\frac{1}{n}\\sum_{i=1}^{n}{(x_i-\\mu)^2}-\\frac{2}{n}(\\bar{x}-\\mu)\\sum_{i=1}^{n}{(x_i-\\mu)}+(\\bar{x}-\\mu)^2]\\] 其中 \\(\\sum_{i=1}^{n}{(x_i-\\mu)}\\) \\(=\\sum_{i=1}^{n}{x_i}-\\sum_{i=1}^{n}{\\mu}\\) \\(=n(\\bar{x}-\\mu)\\) 所以 \\(=E[\\frac{1}{n}\\sum_{i=1}^{n}{(x_i-\\mu)^2}-\\frac{2}{n}(\\bar{x}-\\mu)\\sum_{i=1}^{n}{(x_i-\\mu)}+(\\bar{x}-\\mu)^2]\\) \\(=E[\\frac{1}{n}\\sum_{i=1}^{n}{(x_i-\\mu)^2}-2(\\bar{x}-\\mu)^2+(\\bar{x}-\\mu)^2]\\) \\(=\\sigma^2-E[(\\bar{x}-\\mu)^2]\\) （这里\\(\\sigma^2\\)是因为样本方差的期望值是总体方差） \\(E[(\\bar{x}-\\mu)^2]\\) \\(=E(\\bar{x}-E[\\bar{x}])^2\\) \\(=var(\\bar{x})\\) \\(=\\frac{1}{n^2}var(\\sum_{i=1}^{n}{x_i})\\) \\(=\\frac{1}{n^2}\\sum_{i=1}^{n}{var(x_i)}\\) \\(=\\frac{n\\sigma^2}{n^2}\\) \\(=\\frac{\\sigma^2}{n}\\) 根据上面推导的式子，有以下计算： \\(\\sigma^2-E[(\\bar{x}-\\mu)^2]\\) \\(=\\sigma^2-\\frac{\\sigma^2}{n}\\) \\(=\\frac{n-1}{n}\\sigma^2\\) 也就是说，样本估计的方差是总体方差的\\(\\frac{n-1}{n}\\)倍，即所谓的有偏估计。要转换成无偏估计，只需要乘以倍数就可以了 \\[\\frac{n}{n-1}S^2=\\frac{n}{n-1}\\frac{\\sum_{i=1}^{n}(x_i-\\bar{x})}{n}=\\frac{\\sum_{i=1}^{n}(x_i-\\bar{x})}{n-1}\\] 这即是所谓的无偏估计。 当然，还有一种比较直接的解释，由于是求统计样本中的方差，所以在求解统计样本均值时，已经用掉了一个自由度的值，所以求方差时，其实有用的值会少一个。例如在只有一个样本时，这时求方差是没有意义的。不过在概率论中，求此时的方差是有意义的，因为已经知道了总体的概率分布，所以即使只有一个样本，总体的分布是不变的。其中区别就在于统计样本只是用于估计。","categories":[{"name":"ALGORITHMS","slug":"ALGORITHMS","permalink":"http://zijunwan.github.io/categories/ALGORITHMS/"}],"tags":[{"name":"probability","slug":"probability","permalink":"http://zijunwan.github.io/tags/probability/"}],"keywords":[{"name":"ALGORITHMS","slug":"ALGORITHMS","permalink":"http://zijunwan.github.io/categories/ALGORITHMS/"}]},{"title":"Population Vector Algorithm","slug":"Population-Vector-Algorithm","date":"2020-01-21T06:09:04.000Z","updated":"2023-03-10T03:57:05.657Z","comments":true,"path":"2020/01/21/Population-Vector-Algorithm/","link":"","permalink":"http://zijunwan.github.io/2020/01/21/Population-Vector-Algorithm/","excerpt":"","text":"算法推导： 信号预处理 这里的算法推导主要针对神经元集群解码，因为PVA的主要应用还是在神经元解码中 首先，采集到的spike信号是以发放次数的方式存储的，这里需要先转换成发放率的形式，即： \\[fr[n]=\\frac{spk[n]}{\\Delta t} \\tag{1}\\] 其中，\\(fr[n]\\)表示\\(n\\)时刻神经元的发放率，\\(\\Delta t\\)表示一个bin的长度，通常的取值为20ms，30ms，50ms，1000ms等。\\(spk[n]\\)表示神经元在第\\(n\\)个bin中发放的次数。 然后，对发放率做一个FIR滤波，主要目的是平滑发放率曲线，计算公式如下： \\[s[n]=\\sum_{i=1}^{W-1}{fr[n-i]h[i]} \\tag{2}\\] 其中，\\(h[i]\\)表示滤波器的卷积函数，可以根据需求选取，\\(W\\)表示滤波器的阶数，可以根据实际需要选择。 PVA算法原理 PVA算法的提出，主要是根据实验中观察到的现象。在猴子将手臂移动向不同的方向时，不同的神经元发放的率产生了变化，我们由此假设，神经元的发放率跟运动方向是有关系的，所以我们想到，用余弦曲线的方式，去拟合神经元的发放率与运动方向之间的关系。首先，我们假设每个神经元都有一个自己的偏好方向\\(\\theta_{PD}\\)，假设此时，猴子手臂的运动方向为\\(\\theta\\)，那么此时神经元的发放率为： \\[f=m*cos(\\theta-\\theta_{PD})+b_0 \\tag{3}\\] 其中，\\(m\\)为表征神经元活泼性的参数，即有的神经元可能表征的偏好方向一样，但是在偏好方向上的发放率变化是不一样的。\\(b_0\\)表示神经元的基础发放率，即在静息状态下的基础发放率。\\(f\\)表示的是神经元在猴子手臂朝向\\(\\theta\\)方向运动时的发放率，注意这里是发放率不是spike count，虽然两者可以通过bin转换，但是公式推导的时候两者还是不一样的。 公式\\((3)\\)表示了单个神经元的发放与运动的关系。猴子大脑M1区域的神经元是很多的，对不同的方向肯定有不同的偏好性。那么如何处理这种不一致性呢，我们的方法是用矢量求和的形式，得出一个此时最可能的运动方向。即： \\[\\vec{u}=\\frac{1}{N} \\sum_{i=1}^{n}{m*cos{\\theta_{PD}}} \\tag{4}\\] 这里\\(\\vec{u}\\)表示神经元此时解码出来的运动方向，这里也能部分表征运动速度，但是速度的大小也与实际的运动距离有关，所以，运动速度的计算如下： \\[v=k*\\vec{u}+\\sigma \\tag{5}\\] 这里\\(k\\)表示实际速度与计算得出的速度的比例，\\(\\sigma\\)表示实际速度与解码得到的速度之间的误差，以上就是PVA算法的主要原理 3. 参数计算 那么，现在的问题在于，如何计算PVA算法中的几个参数，这里我们用最小二乘法的方式，求最小误差情况下的参数\\(b_0,m,\\theta_{PD}\\)，我们将公式\\((3)\\)换一种写法，即： \\[f = b_0 + b_1 * cos \\theta + b_2 * sin \\theta \\tag{6}\\] 再考虑\\(cos{\\theta}\\)和\\(sin{\\theta}\\)这两个量，对应在速度中，可以表示为归一化过后的\\(v_x\\)和\\(v_y\\)，只要在\\([-1,1]\\)这个区间内所以，将公式\\((6)\\)写成： \\[f = b_0 + b_1 * v_x + b_2 * v_y \\tag{7}\\] 用最小二乘法计算，误差为： \\[\\epsilon = \\sum_{ i=1 }^{n}{(b_0 + b_1 * v_x + b_2 * v_y - f)^2} \\tag{8}\\] 最终计算结果根据要推导一下，这里先暂时不写，回去再补充 所以，极值在偏导数为\\(0\\)的地方取得，即： \\[\\frac{\\partial{\\epsilon}}{\\partial{b_0}}=0 \\tag{9}\\] \\[\\frac{\\partial{\\epsilon}}{\\partial{b_1}}=0 \\tag{10}\\] \\[\\frac{\\partial{\\epsilon}}{\\partial{b_2}}=0 \\tag{11}\\] 解上述方程，可以得到\\(b_0,b_1,b_2\\)的值，即： \\[\\beta=(A^T*A)^{-1}A^TB \\tag{12}\\] 其中，\\(\\beta=(b_0,b_1,b_2)\\)，\\(A\\)为运动信息矩阵，\\(B\\)为神经信号矩阵。","categories":[{"name":"ALGORITHMS","slug":"ALGORITHMS","permalink":"http://zijunwan.github.io/categories/ALGORITHMS/"}],"tags":[{"name":"pva","slug":"pva","permalink":"http://zijunwan.github.io/tags/pva/"}],"keywords":[{"name":"ALGORITHMS","slug":"ALGORITHMS","permalink":"http://zijunwan.github.io/categories/ALGORITHMS/"}]},{"title":"隐马尔科夫模型","slug":"Hidden-Markov-Model","date":"2020-01-21T06:08:45.000Z","updated":"2023-03-10T03:53:16.794Z","comments":true,"path":"2020/01/21/Hidden-Markov-Model/","link":"","permalink":"http://zijunwan.github.io/2020/01/21/Hidden-Markov-Model/","excerpt":"","text":"背景 隐马尔可夫模型(Hidden Markov Model)是一种常用的统计模型。应用也比较广泛，在时序问题，以及语音识别等问题上有广泛的应用。下面简单介绍一下隐马尔可夫模型。 隐马尔可夫模型是在马尔可夫过程的基础上，加入了隐含状态后的一种结构。这里首先介绍一下什么是马尔可夫过程(Markov Process) 在一个随机过程中，有一个状态变量\\(I\\)，其下一时刻的状态之和之前的状态有关。例如布朗运动，粒子的下一时刻状态之和之前时刻的状态有关。而\\(I\\)变化的过程，也就是马尔科夫链。这个约束，也就是马尔可夫假设。 在马尔可夫过程中，模型还是很复杂，我们还可以加约束来让模型变得简单一点。我们可以假设，状态变量\\(I\\)的下一时刻状态只和上一时刻的状态有关。这样就得到了齐次马尔可夫模型。即： \\[p(I_t|I_{t-1}, I_{t-2}, ..., I_{0}) = p(I_t|I_{t-1}), t=1, 2, ..., T\\] 我们可以看出，马尔可夫模型的描述，只针对某一个变量而言。但是实际生活中，很多变量之间都是相关的。例如你的运动是由肌肉的收缩和舒张来完成的。但是在观察者看来，你只是完成了一个简单的运动。其中，你的运动状态就是观测到的变化量，而肌肉的状态就是隐藏的状态。所以HMM模型的结构如下图所示： 和马尔可夫过程一样，HMM也有一些约束条件。首先，HMM要满足马尔可夫假设且满足齐次马尔可夫模型，即： \\[p(I_t|I_{t-1}, o_{t-1}, ..., I_{0}, o_{0}) = p(I_t|I_{t-1}), t=1, 2, ..., T\\] 然后是观测独立性假设，也就是说任意时刻的观测值只依赖于当前时刻的马尔可夫链的状态\\(i_t\\)， 即： \\[p(o_t|I_t, I_{t-1}, o_{t-1}, ..., I_{0}, o_{0}) = p(o_t|I_t), t=1, 2, ..., T\\] 原理 HMM的结构如上图所示，其中\\(I\\)是状态变量，\\(O\\)是观测变量。假设\\(Q\\)是所有可能的状态的集合，\\(V\\)是所有可能的观测的集合。 \\[Q = \\{ q_1,q_2,...,q_N \\}\\] \\[V = \\{v_1,v_2,...,v_M \\}\\] 即可能的状态有N种， 可能的观测值有M种，两者不一定会相等。那么在一次试验中，观测到的值为\\(O\\)，每个观测值会唯一对应一个状态值，因为试验已经结束了，假设状态序列为\\(I\\)，那么\\(O\\)和\\(I\\)的长度一样，假设为T，那么： \\[O = \\{ O_1,O_2,...,O_T \\}\\] \\[I = \\{ I_1,I_2,...,I_T \\}\\] 在\\(t\\)时刻会有一个状态值，那么下一个时刻的状态值会与上一时刻相关，当然也可以是不相关的，由此给出状态矩阵\\(A\\)的定义： \\[A=[a_{ij}]\\] \\(a_{ij}\\)表示当前时刻\\(t\\)状态为\\(q_i\\)的情况下，下一时刻的状态为\\(q_j\\)的概率，这里\\(i,j=1,2,...N\\)，用数学形式表示，即： \\[a_{ij}=P(I_{t+1}=q_j | I_t=q_i)\\] 有了状态转移矩阵后，我们并不能直接估计下一时刻的状态，因为状态在整个试验过程中是隐藏的，试验中只能得到观测值的相关信息，所以还要有观测值和状态值之间的转换矩阵，即当观测到某个值时，其对应于各个状态的概率分别是多少。假设观测概率矩阵是\\(B\\)，给出\\(B\\)的定义： \\[B=[b_{jk}]\\] \\(b_{jk}\\)表示当前时刻\\(t\\)状态值为\\(q_j\\)的情况下，观测值为\\(v_k\\)的概率。所以有\\(k=1,2,...M\\)，\\(j=1,2,...,N\\)，用数学形式表示，即： \\[b_{jk}=P(o_t=v_k | i_t=q_j)\\] 确定了观测值和状态值之间的转换概率，当前时刻和下一时刻之间的状态转换概率，那么我们还需要确定可能的观测值在试验刚开始时被选中的概率，假设为\\(\\pi\\)，给出\\(\\pi\\)的定义： \\[\\pi=[\\pi_{i}]\\] 其中\\(\\pi_{i}\\)表示观测值\\(q_i\\)在刚开始被选中的概率，那么，\\(i=1,2,...,N\\)，用数学的形式表示，即： \\[\\pi_i=P(I_1=q_i)\\] 到这里，整个HMM模型中的主要参数已经全部介绍了，由介绍可知，根据\\(\\pi,A,B\\)可以让一个HMM模型顺利工作。可以求出在任意状态序列对应的概率\\(P(O|\\lambda)\\)。所以，我们也用这些参数来表示一个HMM模型，即： \\[\\lambda=\\{ A,B,\\pi \\}\\] 。 常见问题 以上介绍了HMM的基本概念，在实际应用中，主要有以下几个基本问题： 已知模型\\(\\lambda\\)以及观测序列\\(O\\)，计算在这种模型下出现这种观测序列的概率\\(P(O|\\lambda)\\) 已知观测序列\\(O\\)，但是不知道模型\\(\\lambda\\)，计算模型\\(\\lambda\\)，使得当前观测序列产生的概率\\(P(O|\\lambda)\\)最大 给定模型\\(\\lambda\\)和观测序列\\(O\\)，计算最有可能产生这一观测序列的状态序列\\(I\\)，即使得\\(P(I|O,\\lambda)最大的\\)\\(I\\) 以上就是最常见的HMM问题，主要涉及到模型中各个参数计算的问题。 在问题１中，我们需要计算观测序列出现的概率，主要可以用来判断出现的这一观测序列是否常见，如果计算得到的概率很低，但是在实际观测中却经常出现，那么就需要检查系统中是否出现了外部干扰。 在问题2中，我们需要计算模型的参数。主要是用于模型的学习和自适应参数调整的问题。模型是不确定的，但是根据给定的观测序列，我们需要找到一个最合适的模型，来保证出现这一观测序列的概率最大。有点类似回归求最优解或者神经网络拟合的思想。 在问题3中，我们需要通过观测序列和模型，来估计隐藏状态。这个主要适用于一些解码问题。通过观测值求解隐藏值。 针对以上的问题，分别有对应的解决办法。下面会介绍最常见的一些解法。当然，由于ＨＭＭ中，观测变量和隐藏状态可能的取值是有限的。所以其实用穷举法也可以算，只是计算量会很大。 解决办法 问题1 已知模型和观测序列，要计算出现这种观测序列的概率\\(P(O|\\lambda)\\) 这个问题有两种解法，前向和后向算法。两种方法比较类似。 前向算法 首先，我们定义一个概率： \\[p_t(i) = P(o_1, o_2, ..., o_t, I_t=q_i)\\] \\(p_t(i)\\)表示观测序列为\\({o_0, o_1, ...,o_t}\\)，同时\\(I_t=q_i\\)的概率。所以我们有以下递推公式： \\[p_{t}(i) = (\\sum_{j=1}^{N}p_{t-1}(j)a_{ji})b_{ik}\\] 同时，有\\(o_{t}=v_{k}\\)。在上面的公式中，\\(\\sum_{j=0}^{N}p_{t-1}(j)a_{ji}\\)表示前\\(t-1\\)个输出为\\({o_1, o_2, ..., o_{t-1}}\\)，且第\\(t\\)个隐藏状态为\\(q_i\\)的概率。因为\\(t-1\\)时刻的状态是任何值都可以，只需要乘以对应的转移概率，就可以计算出\\(t\\)时刻状态为\\(q_i\\)的概率了。 然后在初始状态时，有： \\[p_1(i) = \\pi_ib_{ik}, o_1=v_k\\] 所以最终得到的概率为： \\[P(O|\\lambda) = \\sum_{i=1}^{N}p_T(i)\\] 也就是说，在\\(T\\)时刻，观测序列为\\({o_1, o_2, ..., o_T}\\)，且模型为\\(\\lambda\\)的概率为观测序列为\\({o_1, o_2, ..., o_T}\\)且\\(T\\)时刻状态值为\\({q_1, q_2, ..., q_N}\\)的所有值的和。 后向算法 后向算法和前向算法比较类似，都是通过递推的方式逐步计算观测序列的概率。不同的地方是，后向算法是从后往前算，前向算法是从前往后算。 假设观测序列的长度为\\(T\\)，并定义从\\(t+1\\)时刻到\\(T\\)时刻的序列为\\({o_{t+1}, o_{t+2}, ..., o_T}\\)，且\\(t\\)时刻的隐藏状态为\\(q_i\\)的概率为： \\[p_t(i) = P(o_{t+1}, o_{t+2}, ..., o_T, I_t=q_i|\\lambda)\\] 对于后向算法，初始状态应该是\\(p_T(i)\\)，表示的是观测序列为\\({o_{T+1}}\\)时，且隐藏状态为\\(q_i\\)的概率，但是因为已经知道了\\(o_T\\)的状态了，且\\(o_{T+1}\\)并没有发生，所以这里其实给任意值都可以。这个值其实主要表示的是\\(T+1\\)时刻和\\(T\\)时刻的关系，但是这个关系并不知道，所以给任意值都是可以的。表示这个关系可以是任意的。 然后和前向算法类似，我们可以计算后向的递推公式： \\[p_t(i) = \\sum_{j=1}^{N}a_{ij}b_{jk}p_{t+1}(j)\\] 其中有，\\(o_{t+1} = v_k\\) \\(\\sum_{j=1}^{N}a_{ij}p_{t+1}(j)\\)表示\\(t+2\\)时刻状态为\\(q_j\\)且\\(t\\)时刻的状态为\\(q_i\\)的所有可能的\\(t+2\\)时刻的值的和，所以\\(a_{ij}b_{jk}p_{t+1}(j)\\)表示的是，\\(t+1\\)时刻的观测值为\\(o_{t+1}\\)，也就是\\(v_k\\)，同时\\(t+1\\)时刻的状态值为\\(q_j\\)的概率。求和之后就是，\\(t+1\\)到\\(T\\)时刻的观测值为\\({o_{t+1}, o_{t+2}, ..., o_{T}}\\)，且$ t\\(时刻的隐藏状态为\\)\\(q_i\\)的概率。也就是\\(p_t(i)\\)。 所以可以得到，最终计算的概率为： \\[P(O|\\lambda) = \\sum_{i=1}^{N}\\pi_{i}b_i(o_1)p_1(i)\\] 其中，\\(p_1(i)\\)表示的是观测序列为\\({o_2, o_3, ..., o_T}\\)，$ b_i(o_1)p_1(i)\\(表示观测序列为\\){o_1, o_2, ..., o_T}\\(。所以\\)_ib_i(o_i)p_1(i)\\(表示观测序列为\\)o_1, o_2, ..., o_T\\(, 且\\)I_1=q_i\\(的概率，对所有的\\)I_1={q_1, q_2, ..., q_N}\\(求和，就是观测序列为\\){o_1, o_2, ..., o_N}$的概率 以上就是两种计算观测序列概率的算法。主要的思想都是通过递推计算。 问题2 已知观测序列\\(O\\)， 计算使得\\(P(O|\\lambda)\\)最大的模型参数\\(\\lambda\\) 这个问题有点类似于回归问题中的拉格朗日极值问题，但是由于涉及到隐藏变量的极大似然估计，所以这里并不能用求导的方法来计算。广泛使用的一种计算方法是EM(Expectation Maximum)算法。关于EM算法，会在后续的文章中介绍，这里暂且不写。 问题3 已知观测序列\\(O\\)和模型参数\\(\\lambda\\)，求可能产生这一观测序列的隐藏状态\\(I\\), 使得\\(P(I|\\lambda)\\)最大 这个问题类似于常见的解码问题。对于HMM模型下的解码问题，一般是用动态规划的方法来求解的。因为这样计算量会降低。常用的HMM解码问题的解决办法是维特比算法(Viterbi Algorithm)。这个也会在后续的文章中介绍。这里暂且不写。","categories":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}],"tags":[{"name":"hmm","slug":"hmm","permalink":"http://zijunwan.github.io/tags/hmm/"}],"keywords":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}]},{"title":"主成分分析","slug":"Principle-Component-Analysis","date":"2020-01-21T06:08:27.000Z","updated":"2023-03-10T03:57:42.717Z","comments":true,"path":"2020/01/21/Principle-Component-Analysis/","link":"","permalink":"http://zijunwan.github.io/2020/01/21/Principle-Component-Analysis/","excerpt":"","text":"写一下算法的基本原理和实现 PCA(Principle Component Analysis) PCA是最常见的一种降维算法，其核心思想是数据从高维到低维的投影，使其方差最大化。这个也很好理解，比如，这里我们假设有3组数据\\(a_1,a_2,a_3\\)，然后第1组的值可以用第2组数据的函数表示，比如\\(a_2=2*a_1\\)。如果以\\(a_1,a_2,a_3\\)为坐标画出对应的图像，那么在3维空间中就对应了一个平面，以这个平面的坐标轴为参数，此时看到的就是二维数据，相当于降维了。 插图（参考文献） 参考文献： 假设我们有\\(m\\)组\\(n\\)维数据，希望能降维到\\(k\\)维(\\(k&lt;d\\))，PCA的计算过程如下： 数据零均值化 求协方差矩阵 求协方差矩阵对应的特征值和特征向量 将特征向量按特征值大小取前\\(k\\)行从上向下组成矩阵 将得到的矩阵乘以\\(X\\)就能得到降维后的数据 这里数据零均值化主要是为了方便后面的计算（测试一下不做这一步有什么问题） 然后求协方差矩阵，之所以选择协方差矩阵，是因为协方差能很好地反应不同维度之间的差异，假设数据集为\\(X={x_1,x_2,...,x_m}\\in R^{m*n}\\)， 那么协方差矩阵\\(Cov\\)的定义为 \\[CovX(i,j)=\\sum_{} x_ix_j\\frac{1}{m}\\] 因为之前做过零均值化，所以这里\\(x_i\\)和\\(x_j\\)的均值都是0。 可以看出，协方差矩阵非对角线上的值表示了不同维度上数据之间的差异，对角线上的数据表示了每个维度的数据分布的差异。即在所有组数据中，每个维度上的变化大小的评价。对于协方差矩阵，当\\(CovX(i,j)=0\\)时，说明第\\(i\\)维和第\\(j\\)维的数据是相互独立的，所以，PCA优化的目标在于，尽可能让不同维度之间的协方差为0，而尽可能增大维度自身的方差。 关于求协方差矩阵的特征值，可以理解为将一个特征向量在\\(n\\)维空间中进行旋转和拉伸变换，使之与特征向量自己在同一直线上并成一定的比例，那么这个变换就是这个矩阵（参考二维情况下，二维平面中对向量的拉伸和旋转都可以通过一个二阶方阵来实现，高维空间中同理），而这个比例就是特征值。在\\(n\\)维空间中，这样的特征向量最多有\\(n\\)个，这个可以参考特征向量的求法，当转换成方程组之后，\\(n\\)个方程组最多只能有\\(n\\)组解。关于为什么要求矩阵的特征值和特征向量，这是根据优化问题的解得到的。假设降维后的矩阵为\\(Y \\in R^{m*k}\\)，转换矩阵为\\(T\\)，那么\\(Y\\)的协方差为 \\[CovY=Y * Y^T * \\frac{1}{m}\\] \\[=(TY) * (TY)^T * \\frac{1}{m}\\] \\[=T * CovX * T^T\\] 所以对于转换矩阵\\(T\\)，我们需要通过计算后，使得\\(CovY\\)为一个对角矩阵，并且矩阵中的值依次从大到小排列，因为根据优化的目标，我们需要使\\(CovY\\)的对角线上的值最大，且除对角线以外的数都为0。我们知道，实对称矩阵的不同特征向量是正交的。所以将\\(CovX\\)进行特征分解求出特征值和特征向量，然后取前\\(k\\)组特征向量组成转换矩阵\\(T\\)，就可以使得降维后的矩阵\\(Y\\)的维度与维度之间的差异值最大。 关于代码和计算，matlab中有princomp和pca函数可以直接计算。 这里数据用的是鸢尾花数据集， 代码如下： load fixeddata; [coeff,score,latent] = pca(newdata); result=score(:,1:2); x=result(:,1); y=result(:,2); scatter(x,y,'x'); 结果如图： result of PCA 综上，PCA是一种很常用的降维方法，也是一种无监督的降维方法。同时，从PCA的原理中可以看出，PCA对于线性相关的降维效果会比较好，但是对于非线性的数据，其降维效果可能就会差很多。","categories":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}],"tags":[{"name":"pca","slug":"pca","permalink":"http://zijunwan.github.io/tags/pca/"}],"keywords":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}]},{"title":"使用Matlab搭建深度学习神经网络","slug":"Deep-Leaning-Using-Matlab","date":"2020-01-21T06:05:15.000Z","updated":"2023-03-10T03:49:41.953Z","comments":true,"path":"2020/01/21/Deep-Leaning-Using-Matlab/","link":"","permalink":"http://zijunwan.github.io/2020/01/21/Deep-Leaning-Using-Matlab/","excerpt":"","text":"常见的matlab搭建神经网络的代码结构 options = trainingOptions(solverName, Name, Value); layer = [layer1, layer2]; net = trainNetwork(TrainX, TrainY, options, layers); 其中，trainingOptions的主要作用就是设置网络中的一些参数，主要包括以下参数： 参数名称 参数值 参数含义 solverName 'sgdm'|'rmsprop'|'adam' 优化方法 Plots 'none' | 'training-progress' 是否画优化曲线 Verbose 1 | 0 是否显示优化信息，包括Loss，Epoch等信息 VerboseFrequency int value 多长时间刷新一次信息，默认值是50 MaxEpochs int value 最大循环次数，训练数据最多重复多少次 MiniBatchSize int value 最小的batch size，每次训练的最小数据量 ‘Shuffle' ’once‘ | 'never' | 'every-epoch' 每个epoch是否重新排序训练数据 ‘ValidationData' imageData，Data Store, Table，Cell array{X, Y} 用来验证网络的数据，一般用cell 'ValidationFrequency' int value 迭代多少次验证一次 ’ValidationPatience' int value 如果这次的验证loss比上一次大，这种情况出现的次数超过这个值，那么停止网络训练 ‘InitialLearnRate' scalar 初始学习率 'LearnRateSchedule' 'none'|'piecewise' 调整学习率下降的方法，’piecewise‘方法会隔特定数目的epoch(LearnRateDropPeriod)就将LearnRate乘以一个factor(LearRateDropFactor) ’LearnRateDropPeriod' int value 隔特定数目的epoch调整一次LearnRate ‘LearnRateDropFactor’ scalar(0-1) 每次LearnRate调整时乘以的因子 ‘L2Regularization' nonnegative scalar 用来减少过拟合，（需要继续学习） ’Momentum' scalar(0-1) 动量，sgdm中前一次迭代中的参数在下一次迭代中所占的比例 ‘GradientDecayFactor' scalar(0-1) adam方法中梯度值降低的平均值 ’SquaredGradientDecayFactor‘ nonnegative scalar less than 1 梯度平方降低的平均值（Adam， RMSProp） ’Epsilon‘ int value 分母的偏置值(Adam, RMSProp) 'ResetInputNormalization' true | false 每次训练都将输入值标准化 ’GradientThreshold‘ int value 梯度的阈值 ’GradientThresholdMethod‘ ’l2norm‘|'global-l2norm'|'absolute-value' 梯度阈值的计算方法 ’SequenceLength‘ 'longest'|'shortest'|int value 输入的序列长度 ’SequencePaddingDirection‘ ’right'|'left' 如果序列需要截取，截取的方向 ‘SequencePaddingValue’ int value 填充到序列中的值，用来补充数据长度 ‘ExecutionEnvironment’ ‘auto’|'cpu'|'gpu'|'multi-gpu'|'parallel' 选择硬件 ‘WorkLoad’ scalar(0-1)|int|vector GPU或CPU的负载，用到的核心数，以及并行计算时的负载 ‘DispatchInBackground’ false | true 后台拆分数据并分配核心同时读取 ‘CheckpointPath’ character 存放网络训练中间值的路径 ‘OutputFunc’ function handle 网络训练时，trainNetwork函数会在刚开始训练时，每次迭代结束时，训练结束时调用这个函数 trainingOptions函数主要用来设置网络训练过程中的参数，需要熟悉其中的参数的作用 layers主要表示网络的结构，层与层之间的连接等，其中主要包括各种网络层，目前常用的有如下几类： 网络层 参数 含义 allLayer Name 网络层的名称 NumInputs 输入的个数 InputNames 输入数据的名称，cell NumOutputs 输出的个数 OutputNames 输出数据的名称，cell sequenceLayer InputSize 输入序列的大小，如果是图像的话，那么就是一个三维或四维矩阵 Normalization 数据归一化的方法选择 NormalizationDimension 归一化的维度，按照通道，按照元素或者全部统一 Mean 设置数据的均值配合zscore和zerocenter等归一化方法使用 StandardDeviation 标准差，配合对应的归一化方法使用 Min 归一化后的最小值 Max 归一化后的最大值 fullyConnectedLayer OutputSize 输出层大小 InputSize 输入层大小","categories":[{"name":"DEEPLEARNING","slug":"DEEPLEARNING","permalink":"http://zijunwan.github.io/categories/DEEPLEARNING/"}],"tags":[{"name":"notes","slug":"notes","permalink":"http://zijunwan.github.io/tags/notes/"}],"keywords":[{"name":"DEEPLEARNING","slug":"DEEPLEARNING","permalink":"http://zijunwan.github.io/categories/DEEPLEARNING/"}]},{"title":"C#语法笔记","slug":"C-Sharp-Notes","date":"2020-01-21T06:05:01.000Z","updated":"2023-03-10T03:49:03.355Z","comments":true,"path":"2020/01/21/C-Sharp-Notes/","link":"","permalink":"http://zijunwan.github.io/2020/01/21/C-Sharp-Notes/","excerpt":"","text":"Lambda表达式 委托的另一种表达方式 delegate NumberChange(int Funcn); NumberChange nc1 = (Funcn) =&gt; Funcn + 10; // =&gt;读作 goes to 委托(delegate) 委托有点类似C++中的函数指针，其参数可以是一个函数，例如: deletate int NumberChange(int Funcn); 定义中，Func是一个返回int类型的函数 委托的多播(multicasting) 多个相同类型的委托可以合并，例如： delegate int NumberChange(int Funcn); NumberChange nc; NumberChange nc1 = new NumberChange(AddNum); //AddNum是一个函数，返回int NumberChange nc2 = new NumberChange(MultiNum); // MultiNum是一个函数，返回int nc = nc1 + nc2; 委托的实例化不带有任何参数 匿名委托 delegate int NumberChange(int FUncn); NumberChange nc1 = delegate(int Funcn); { //实现AddNum的功能 return Funcn + 10; } 泛型委托 委托函数参数类型有多种，但是返回参数类型是最后一个 Func&lt;int, int, bool&gt; gwl = (p, j) =&gt; { if(p+j==10) return true; else return false; } Console.WriteLine(gwl(5, 5) + \"\"); Console.ReadKey(); sealed关键字 类似于Java中的final关键字，sealed修饰的类不能被继承 ​ list 的用法 泛型list，和泛型委托的概念类似，其定义为： List&lt;T&gt; testList = new List&lt;T&gt;(IEnumerable&lt;T&gt; Collection); // e.g string[] temArr = {\"A\", \"B\", \"C\", \"D\"}; List&lt;string&gt; testList = new List&lt;string&gt;(tempArr); //或者这么写 List&lt;string&gt; testList = new List&lt;string&gt;{\"A\", \"B\", \"C\"}; 和C++中的vector动态数组有点类似 list的主要函数也和vector比较类似，例如： List.Add(T item);//添加单个元素 List.AddRange(IEnumerable&lt;T&gt; collection);//添加一组元素 List.Insert(int index, T item); //在index处添加元素item List.Remove(T item);//移除元素item List.RemveAt(int index);//移除index处的元素 List.RemoveRange(int index, int count);//移除index处开始的count个元素 List.Contains(T item);//判断是否包含元素item List.Sort();//List排序 List.Reverse();//翻转List List.Clear();//清除List List.Count();//计算List中元素的个数 List.Find(Predicate&lt;T&gt; match);//搜索List中满足条件的元素，并返回第一个元素","categories":[{"name":"LANGUAGE","slug":"LANGUAGE","permalink":"http://zijunwan.github.io/categories/LANGUAGE/"}],"tags":[{"name":"notes","slug":"notes","permalink":"http://zijunwan.github.io/tags/notes/"}],"keywords":[{"name":"LANGUAGE","slug":"LANGUAGE","permalink":"http://zijunwan.github.io/categories/LANGUAGE/"}]},{"title":"Kalman滤波","slug":"Kalman","date":"2019-11-03T07:46:44.000Z","updated":"2023-03-10T04:05:36.304Z","comments":true,"path":"2019/11/03/Kalman/","link":"","permalink":"http://zijunwan.github.io/2019/11/03/Kalman/","excerpt":"","text":"本文简单介绍了卡尔曼滤波(Kalman Filter)的基本原理以及我对卡尔曼滤波的一些理解。 首先谈一下我的一点点理解 卡尔曼滤波是目前应用很广泛的一种滤波方法，最早由Kalman老先生在1960年提出，网上可以找到原文。这种方法最开始用在航天领域，作为轨道矫正的一种方法，有很好的效果。 卡尔曼滤波的方法的核心思想，就是用另一个测量空间的观测值去纠正当前空间对被测量的量的估计。简单来说，就是用一种方法去测量一个量。同时建立一个模型去估计这个测量的量，最后，按权重的方式求这两种方式的和，就是滤波之后的量的值。而这个权重的大小，就是卡尔曼系数。 公式推导 首先，我们假设要测量的量为\\(x\\), 这个量有一个模型去描述其随时间的变化，例如计算每天的温度变化，可以大致根据之前几天的温度变化规律得到一个计算矩阵，这里也有一个计算模型去计算这个变量\\(x\\) \\[x_t=Fx_{t-1} + w_t\\] \\[w_{t} - N(0,Q)\\] 其中\\(F\\)为转换矩阵，\\(w_{t-1}\\)表示\\(t-1\\)时刻的噪声，且该噪声服从高斯分布。在其他的卡尔曼滤波公式推导中，会有一个额外的控制量，这里不考虑这个量。 对于测量矩阵，也有一个公式去转换。例如测量温度可以用温度传感器来测量，但是温度传感器的测量是因为温度改变了电阻的阻值，所以根据电压电流以及电阻随温度的变化曲线而计算出来的。在卡尔曼模型中，这一公式可以表示为如下等式 \\[z_t=Hx_t+v_t\\] \\[v_t - N(0,R)\\] 其中，\\(z_t\\)是通过测量的量，对应到上述的例子中，就是温度传感器的电阻阻值，\\(x_t\\)就是温度。\\(H\\)是测量矩阵，用来将测量的量转换成要估计的量。\\(v_t\\)是测量过程中存在的误差。同样的，\\(v_t\\)也是服从高斯分布的白噪声。 然后就是卡尔曼滤波的核心思想了，有了这两种方法得到的\\(x_t\\)，那么怎么得到一个更准确的估计值。所以需要将两种方法得到的估计值进行算一下加权平均，就得到了最优的估计值。所以卡尔曼滤波的方法如下： 首先根据模型计算当前时刻的估计值 \\[ x_t'=Fx_{t-1} + w_t \\] 然后根据测量矩阵计算当前的测量值的估计值 \\[ z_t'=Hx_t'+v_t \\] 然后计算测量值和测量估计值之间的差，并以此作为对最终估计值的调整。从这里可以看出，如果\\(x_t'\\)估计的很准，就是说此时\\(z_t\\)的值和\\(z_t'\\)的值相差很小，那么\\(z_t\\)对于\\(x_t\\)的修正也就越少。但是如果估计值和测量值相差很大，那么\\(z_t\\)对\\(x_t\\)的修正也就越大。其中，\\(K_t\\)是卡尔曼增益，表示滤波器对测量值的信任程度。 \\[ x_t=x_t'+K_t*(z_t-z_t') \\] 那么如何估计卡尔曼增益，可以用贝叶斯估计的方法推导，也可以用最小二乘法的方式推导，这里用最小二乘法的方式推导 我们假设真实值是\\(X_t\\)，那么卡尔曼滤波计算得到的估计值和真实值之间的协方差 \\[ P(x_t|X_t)= E[(X_t-x_t)(X_t-x_t)^T] \\] 卡尔曼滤波的估计值和模型的估计值之间的协方差，用来评估两种估计的差别 \\[ P(x|x')=E[(x_t-x_t')(x_t-x_t')^T] \\] 根据卡尔曼的估计公式以及测量公式，可以得到 \\[ P(x_t|X_t)=E [(X_t - x_t' - K_t * ( z_t - z_t')) ( X_t - x_t' - K_t * ( z_t - z_t' ))^T] \\] \\[ =E[((I-K_tH)(X_t-x_t')-K_tv_t)((I-K_tH)(X_t-x_t')-K_tv_t)^T] \\] 把上述等式展开，可以得到 \\[ P(x_t|X_t)=(I-K_tH)P(x_t|x_t')(I-K_tH)+K_tE[v_tv_t^T]K_t^T \\] \\[ =P(x_t|x_t')-K_tHP(x_t|x_t')-P(x_t|x_t')H^TK_t^T+K_t(HP(x_t|x_t')H^T+R)K_t^T \\] 所以，如果我们要估计的更准确，那么就要\\(P(x_t|X_t)\\)更小，就是说真实值和卡尔曼滤波的估计值之间的协方差最小。不考虑估计值之间的相关，那么协方差矩阵的对角线元素就表示了卡尔曼估计值和真实值之间的方差。接下来就是求方差最小的情况下对应的卡尔曼增益\\(K_t\\)。可以用矩阵的迹的方法求解 \\[ tr(P(x_t|X_t)) = tr(P(x_t|x_t'))-2tr(K_tHP(x_t|x_t'))+tr(K_t(HP(x_t|x_t')H^T+R)K_t^T) \\] 可以看出，\\(tr(P(x_t|X_t))\\)是\\(K_t\\)的二次函数，所以根据二次函数求极值的方法，对tr(P(x_t|X_t))求导，得到 \\[ \\frac{d(tr(P(x_t|X_t)))}{d(K_t)}=-2(HP(x_t|x_t'))^T+2K_t(HP(x_t|x_t')H^T+R) \\] 令\\(\\frac{d(tr(P(x_t|X_t)))}{d(K_t)}=0\\)，所以有 \\[ K_t=P(x_t|x_t')H^T(HP(x_t|x_t')H^T+R)^{-1} \\] 把\\(K_t\\)的结果带入到\\(P(x_t|X_t)\\)的表达式中，有 \\[ P(x_t|X_t)=P(x_t|x_t')-K_tHP(x_t|x_t')-P(x_t|x_t')H^TK_t^T+K_t(HP(x_t|x_t')H^T+R)K_t^T \\] \\[ =P(x_t|x_t')-K_tHP(x_t|x_t')-\\frac{HP(x_t|x_t')^TP(x_t|x_t')H^T}{HP(x_t|x_t')H^T+R}+\\frac{HP(x_t|x_t')^TP(x_t|x_t')H^T}{HP(x_t|x_t')H^T+R} \\] \\[ =P(x_t|x_t')-K_tHP(x_t|x_t') =(I-K_tH)P(x_t|x_t') \\] 所以根据上述的推导计算，可以得到卡尔曼滤波的计算过程： 首先，根据已知的模型，以及上一时刻的卡尔曼估计值，计算当前时刻的模型预测值 \\[ x_t'=Fx_{t-1} \\] 根据当前的模型预测值，计算对应的协方差 \\[ P(x_t|x_t')=FP(x_t|X_t)F^T \\] 根据当前的协方差和测量空间的转换矩阵，计算当前时刻的卡尔曼增益 \\[ K_t=P(x_t|x_t')H^T(HP(x_t|x_t')H^T+R)^{-1} \\] 根据卡尔曼增益和测量值，计算当前时刻的卡尔曼估计值 \\[ x_t=x_t'+K_t(z_t-Hx_t') \\] 计算了当前时刻的卡尔曼估计值之后，还需要计算当前的估计值和真实值的协方差矩阵，方便下一次计算 \\[ P(x_t|X_t)=(I-HK_t)P(x_t|x_t') \\] 以上就是卡尔曼滤波的基本过程，以及一些简单的推导。总体上说理解卡尔曼滤波应该算一种最优估计的算法。也是应用很广泛的，然后卡尔曼滤波的推导方法也有很多，除了最小二乘法，也可以从贝叶斯估计的角度推导。两者是类似的。 Code","categories":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}],"tags":[{"name":"kalman","slug":"kalman","permalink":"http://zijunwan.github.io/tags/kalman/"}],"keywords":[{"name":"MACHINE LEARNING","slug":"MACHINE-LEARNING","permalink":"http://zijunwan.github.io/categories/MACHINE-LEARNING/"}]}]}